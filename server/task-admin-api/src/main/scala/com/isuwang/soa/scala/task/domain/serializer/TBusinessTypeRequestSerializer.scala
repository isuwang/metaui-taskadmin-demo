 package com.isuwang.soa.scala.task.domain.serializer;

        import com.isuwang.soa.scala.common.util.serializer._;import com.isuwang.soa.scala.task.domain.serializer._;
        import com.isuwang.dapeng.core._
        import com.isuwang.org.apache.thrift._
        import com.isuwang.org.apache.thrift.protocol._

        /**
        * Autogenerated by Dapeng-Code-Generator (1.2.2)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *  @generated
        **/

        class TBusinessTypeRequestSerializer extends TCommonBeanSerializer[com.isuwang.soa.scala.task.domain.TBusinessTypeRequest]{
          
      @throws[TException]
      override def read(iprot: TProtocol): com.isuwang.soa.scala.task.domain.TBusinessTypeRequest = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var pageRequest: com.isuwang.soa.scala.common.util.TPageRequest = null
        var businessTypeId: Option[Int] = None
        var updateAtStart: Option[Long] = None
        var updateAtEnd: Option[Long] = None
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRUCT => pageRequest = new com.isuwang.soa.scala.common.util.serializer.TPageRequestSerializer().read(iprot)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 2 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.I32 => businessTypeId = Option(iprot.readI32)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 3 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.I64 => updateAtStart = Option(iprot.readI64)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 4 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.I64 => updateAtEnd = Option(iprot.readI64)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = com.isuwang.soa.scala.task.domain.TBusinessTypeRequest(pageRequest = pageRequest,businessTypeId = businessTypeId,updateAtStart = updateAtStart,updateAtEnd = updateAtEnd)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: com.isuwang.soa.scala.task.domain.TBusinessTypeRequest, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("TBusinessTypeRequest"))

      
            {
            val elem0 = bean.pageRequest 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("pageRequest", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
             new com.isuwang.soa.scala.common.util.serializer.TPageRequestSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
            if(bean.businessTypeId.isDefined){
            val elem1 = bean.businessTypeId .get
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("businessTypeId", com.isuwang.org.apache.thrift.protocol.TType.I32, 2.asInstanceOf[Short]))
            oprot.writeI32(elem1)
            oprot.writeFieldEnd
            
            }
            if(bean.updateAtStart.isDefined){
            val elem2 = bean.updateAtStart .get
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("updateAtStart", com.isuwang.org.apache.thrift.protocol.TType.I64, 3.asInstanceOf[Short]))
            oprot.writeI64(elem2)
            oprot.writeFieldEnd
            
            }
            if(bean.updateAtEnd.isDefined){
            val elem3 = bean.updateAtEnd .get
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("updateAtEnd", com.isuwang.org.apache.thrift.protocol.TType.I64, 4.asInstanceOf[Short]))
            oprot.writeI64(elem3)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: com.isuwang.soa.scala.task.domain.TBusinessTypeRequest): Unit = {
      
              if(bean.pageRequest == null)
              throw new SoaException(SoaBaseCode.NotNull, "pageRequest字段不允许为空")
            
                if(bean.pageRequest != null)
                new com.isuwang.soa.scala.common.util.serializer.TPageRequestSerializer().validate(bean.pageRequest)
              
    }
    

          @throws[TException]
          override def toString(bean: com.isuwang.soa.scala.task.domain.TBusinessTypeRequest): String = if (bean == null) "null" else bean.toString

        }
        
      