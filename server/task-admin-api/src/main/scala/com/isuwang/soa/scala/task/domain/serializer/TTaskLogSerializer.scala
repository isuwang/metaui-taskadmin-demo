 package com.isuwang.soa.scala.task.domain.serializer;

        import com.isuwang.soa.scala.common.util.serializer._;import com.isuwang.soa.scala.task.domain.serializer._;
        import com.isuwang.dapeng.core._
        import com.isuwang.org.apache.thrift._
        import com.isuwang.org.apache.thrift.protocol._

        /**
        * Autogenerated by Dapeng-Code-Generator (1.2.2)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *  @generated
        **/

        class TTaskLogSerializer extends TCommonBeanSerializer[com.isuwang.soa.scala.task.domain.TTaskLog]{
          
      @throws[TException]
      override def read(iprot: TProtocol): com.isuwang.soa.scala.task.domain.TTaskLog = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var id: Int = 0
        var taskId: Int = 0
        var operation: String = null
        var operField: Option[String] = None
        var oldValue: Option[String] = None
        var newValue: Option[String] = None
        var createdAt: Long = 0
        var createdBy: Option[Int] = None
        var updatedAt: Long = 0
        var updatedBy: Option[Int] = None
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.I32 => id = iprot.readI32
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 2 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.I32 => taskId = iprot.readI32
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 3 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRING => operation = iprot.readString
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 4 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRING => operField = Option(iprot.readString)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 5 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRING => oldValue = Option(iprot.readString)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 6 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRING => newValue = Option(iprot.readString)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 7 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.I64 => createdAt = iprot.readI64
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 8 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.I32 => createdBy = Option(iprot.readI32)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 9 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.I64 => updatedAt = iprot.readI64
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 10 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.I32 => updatedBy = Option(iprot.readI32)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = com.isuwang.soa.scala.task.domain.TTaskLog(id = id,taskId = taskId,operation = operation,operField = operField,oldValue = oldValue,newValue = newValue,createdAt = createdAt,createdBy = createdBy,updatedAt = updatedAt,updatedBy = updatedBy)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: com.isuwang.soa.scala.task.domain.TTaskLog, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("TTaskLog"))

      
            {
            val elem0 = bean.id 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("id", com.isuwang.org.apache.thrift.protocol.TType.I32, 1.asInstanceOf[Short]))
            oprot.writeI32(elem0)
            oprot.writeFieldEnd
            
            }
            {
            val elem1 = bean.taskId 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("taskId", com.isuwang.org.apache.thrift.protocol.TType.I32, 2.asInstanceOf[Short]))
            oprot.writeI32(elem1)
            oprot.writeFieldEnd
            
            }
            {
            val elem2 = bean.operation 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("operation", com.isuwang.org.apache.thrift.protocol.TType.STRING, 3.asInstanceOf[Short]))
            oprot.writeString(elem2)
            oprot.writeFieldEnd
            
            }
            if(bean.operField.isDefined){
            val elem3 = bean.operField .get
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("operField", com.isuwang.org.apache.thrift.protocol.TType.STRING, 4.asInstanceOf[Short]))
            oprot.writeString(elem3)
            oprot.writeFieldEnd
            
            }
            if(bean.oldValue.isDefined){
            val elem4 = bean.oldValue .get
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("oldValue", com.isuwang.org.apache.thrift.protocol.TType.STRING, 5.asInstanceOf[Short]))
            oprot.writeString(elem4)
            oprot.writeFieldEnd
            
            }
            if(bean.newValue.isDefined){
            val elem5 = bean.newValue .get
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("newValue", com.isuwang.org.apache.thrift.protocol.TType.STRING, 6.asInstanceOf[Short]))
            oprot.writeString(elem5)
            oprot.writeFieldEnd
            
            }
            {
            val elem6 = bean.createdAt 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("createdAt", com.isuwang.org.apache.thrift.protocol.TType.I64, 7.asInstanceOf[Short]))
            oprot.writeI64(elem6)
            oprot.writeFieldEnd
            
            }
            if(bean.createdBy.isDefined){
            val elem7 = bean.createdBy .get
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("createdBy", com.isuwang.org.apache.thrift.protocol.TType.I32, 8.asInstanceOf[Short]))
            oprot.writeI32(elem7)
            oprot.writeFieldEnd
            
            }
            {
            val elem8 = bean.updatedAt 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("updatedAt", com.isuwang.org.apache.thrift.protocol.TType.I64, 9.asInstanceOf[Short]))
            oprot.writeI64(elem8)
            oprot.writeFieldEnd
            
            }
            if(bean.updatedBy.isDefined){
            val elem9 = bean.updatedBy .get
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("updatedBy", com.isuwang.org.apache.thrift.protocol.TType.I32, 10.asInstanceOf[Short]))
            oprot.writeI32(elem9)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: com.isuwang.soa.scala.task.domain.TTaskLog): Unit = {
      
              if(bean.operation == null)
              throw new SoaException(SoaBaseCode.NotNull, "operation字段不允许为空")
            
    }
    

          @throws[TException]
          override def toString(bean: com.isuwang.soa.scala.task.domain.TTaskLog): String = if (bean == null) "null" else bean.toString

        }
        
      