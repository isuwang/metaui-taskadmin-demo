package com.isuwang.soa.scala.task

        import com.isuwang.dapeng.core._
        import com.isuwang.org.apache.thrift._
        import com.isuwang.dapeng.remoting.BaseCommonServiceClient
        import com.isuwang.soa.scala.task.TaskSuggestionServiceCodec._
        import scala.concurrent.{Future, Promise}
        import java.util.function.BiConsumer

        /**
         * Autogenerated by Dapeng-Code-Generator (1.2.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated

        **/
        object TaskSuggestionServiceAsyncClient extends BaseCommonServiceClient("com.isuwang.soa.scala.task.service.TaskSuggestionService", "1.0.0"){

        override def isSoaTransactionalProcess: Boolean = {

          var isSoaTransactionalProcess = false
          
          isSoaTransactionalProcess
        }

        
            /**
            * 
            **/
            def findSuggestions(request:com.isuwang.soa.scala.task.domain.TSuggestionRequest , timeout: Long) : scala.concurrent.Future[com.isuwang.soa.scala.task.domain.TSuggestionResponse] = {

            initContext("findSuggestions");

            try {
              val _responseFuture = sendBaseAsync(findSuggestions_args(request), new FindSuggestions_argsSerializer(), new FindSuggestions_resultSerializer(), timeout).asInstanceOf[java.util.concurrent.CompletableFuture[findSuggestions_result]]

              val promise = Promise[com.isuwang.soa.scala.task.domain.TSuggestionResponse]()

              _responseFuture.whenComplete(new BiConsumer[findSuggestions_result, Throwable]{

              override def accept(r: findSuggestions_result, e: Throwable): Unit = {
                if(e != null)
                  promise.failure(e)
                else
                  promise.success(r.success)
                }
              })
              promise.future
            }catch{
              case e: SoaException => throw e
              case e: TException => throw new SoaException(e)
            }finally {
              destoryContext()
            }
          }
          
            /**
            * 
            **/
            def createSuggestion(request:com.isuwang.soa.scala.task.domain.TSaveSuggestion , timeout: Long) : scala.concurrent.Future[Unit] = {

            initContext("createSuggestion");

            try {
              val _responseFuture = sendBaseAsync(createSuggestion_args(request), new CreateSuggestion_argsSerializer(), new CreateSuggestion_resultSerializer(), timeout).asInstanceOf[java.util.concurrent.CompletableFuture[createSuggestion_result]]

              val promise = Promise[Unit]()

              _responseFuture.whenComplete(new BiConsumer[createSuggestion_result, Throwable]{

              override def accept(r: createSuggestion_result, e: Throwable): Unit = {
                if(e != null)
                  promise.failure(e)
                else
                  promise.success()
                }
              })
              promise.future
            }catch{
              case e: SoaException => throw e
              case e: TException => throw new SoaException(e)
            }finally {
              destoryContext()
            }
          }
          
            /**
            * 
            **/
            def updateSuggestion(request:com.isuwang.soa.scala.task.domain.TSaveSuggestion , timeout: Long) : scala.concurrent.Future[Unit] = {

            initContext("updateSuggestion");

            try {
              val _responseFuture = sendBaseAsync(updateSuggestion_args(request), new UpdateSuggestion_argsSerializer(), new UpdateSuggestion_resultSerializer(), timeout).asInstanceOf[java.util.concurrent.CompletableFuture[updateSuggestion_result]]

              val promise = Promise[Unit]()

              _responseFuture.whenComplete(new BiConsumer[updateSuggestion_result, Throwable]{

              override def accept(r: updateSuggestion_result, e: Throwable): Unit = {
                if(e != null)
                  promise.failure(e)
                else
                  promise.success()
                }
              })
              promise.future
            }catch{
              case e: SoaException => throw e
              case e: TException => throw new SoaException(e)
            }finally {
              destoryContext()
            }
          }
          
            /**
            * 
            **/
            def deleteSuggestion(id:Int , timeout: Long) : scala.concurrent.Future[Unit] = {

            initContext("deleteSuggestion");

            try {
              val _responseFuture = sendBaseAsync(deleteSuggestion_args(id), new DeleteSuggestion_argsSerializer(), new DeleteSuggestion_resultSerializer(), timeout).asInstanceOf[java.util.concurrent.CompletableFuture[deleteSuggestion_result]]

              val promise = Promise[Unit]()

              _responseFuture.whenComplete(new BiConsumer[deleteSuggestion_result, Throwable]{

              override def accept(r: deleteSuggestion_result, e: Throwable): Unit = {
                if(e != null)
                  promise.failure(e)
                else
                  promise.success()
                }
              })
              promise.future
            }catch{
              case e: SoaException => throw e
              case e: TException => throw new SoaException(e)
            }finally {
              destoryContext()
            }
          }
          
            /**
            * 
            **/
            def findAllSuggestions4PickerByType(`type`:Int , timeout: Long) : scala.concurrent.Future[List[com.isuwang.soa.scala.task.domain.TSuggestion4Picker]] = {

            initContext("findAllSuggestions4PickerByType");

            try {
              val _responseFuture = sendBaseAsync(findAllSuggestions4PickerByType_args(`type`), new FindAllSuggestions4PickerByType_argsSerializer(), new FindAllSuggestions4PickerByType_resultSerializer(), timeout).asInstanceOf[java.util.concurrent.CompletableFuture[findAllSuggestions4PickerByType_result]]

              val promise = Promise[List[com.isuwang.soa.scala.task.domain.TSuggestion4Picker]]()

              _responseFuture.whenComplete(new BiConsumer[findAllSuggestions4PickerByType_result, Throwable]{

              override def accept(r: findAllSuggestions4PickerByType_result, e: Throwable): Unit = {
                if(e != null)
                  promise.failure(e)
                else
                  promise.success(r.success)
                }
              })
              promise.future
            }catch{
              case e: SoaException => throw e
              case e: TException => throw new SoaException(e)
            }finally {
              destoryContext()
            }
          }
          

      }
      