package com.isuwang.soa.scala.task
        import com.isuwang.soa.scala.common.util.serializer._;import com.isuwang.soa.scala.task.domain.serializer._;

        import com.isuwang.dapeng.core._
        import com.isuwang.org.apache.thrift._
        import com.isuwang.org.apache.thrift.protocol._

        /**
        * Autogenerated by Dapeng-Code-Generator (1.2.2)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *  @generated
        **/
        object TaskAdminServiceCodec {

        
            case class findTasks_args(request:com.isuwang.soa.scala.task.domain.TTaskRequest)

            case class findTasks_result(success:com.isuwang.soa.scala.task.domain.TTaskResponse)

            class FindTasks_argsSerializer extends TCommonBeanSerializer[findTasks_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): findTasks_args = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var request: com.isuwang.soa.scala.task.domain.TTaskRequest = null
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRUCT => request = new com.isuwang.soa.scala.task.domain.serializer.TTaskRequestSerializer().read(iprot)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = findTasks_args(request = request)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: findTasks_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("findTasks_args"))

      
            {
            val elem0 = bean.request 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
             new com.isuwang.soa.scala.task.domain.serializer.TTaskRequestSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: findTasks_args): Unit = {
      
              if(bean.request == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空")
            
                if(bean.request != null)
                new com.isuwang.soa.scala.task.domain.serializer.TTaskRequestSerializer().validate(bean.request)
              
    }
    

            override def toString(bean: findTasks_args): String = if(bean == null)  "null" else bean.toString
            }

            class FindTasks_resultSerializer extends TCommonBeanSerializer[findTasks_result]{

            @throws[TException]
            override def read(iprot: TProtocol): findTasks_result = {

              var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              var success : com.isuwang.soa.scala.task.domain.TTaskResponse = null

              while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                    case 0 =>
                       schemeField.`type` match {
                          case com.isuwang.org.apache.thrift.protocol.TType.STRUCT =>  success = new com.isuwang.soa.scala.task.domain.serializer.TTaskResponseSerializer().read(iprot)
                          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = findTasks_result(success)
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: findTasks_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("findTasks_result"))

      
            {
            val elem0 = bean.success 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 0.asInstanceOf[Short]))
             new com.isuwang.soa.scala.task.domain.serializer.TTaskResponseSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: findTasks_result): Unit = {
      
              if(bean.success == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空")
            
                if(bean.success != null)
                new com.isuwang.soa.scala.task.domain.serializer.TTaskResponseSerializer().validate(bean.success)
              
    }
    

            override def toString(bean: findTasks_result): String = if(bean == null)  "null" else bean.toString
          }

            class findTasks extends SoaProcessFunction[com.isuwang.soa.scala.task.service.TaskAdminService, findTasks_args, findTasks_result, FindTasks_argsSerializer,  FindTasks_resultSerializer]("findTasks", new FindTasks_argsSerializer(), new FindTasks_resultSerializer()){

            override def isOneway: Boolean = false

            override def getEmptyArgsInstance: findTasks_args = null


            @throws[TException]
            def getResult(iface: com.isuwang.soa.scala.task.service.TaskAdminService, args: findTasks_args):findTasks_result = {

              val _result = iface.findTasks(args.request)
              findTasks_result(_result )
            }
          }
          
            case class findTaskDetailById_args(id:Int)

            case class findTaskDetailById_result(success:com.isuwang.soa.scala.task.domain.TTaskDetail)

            class FindTaskDetailById_argsSerializer extends TCommonBeanSerializer[findTaskDetailById_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): findTaskDetailById_args = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var id: Int = 0
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.I32 => id = iprot.readI32
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = findTaskDetailById_args(id = id)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: findTaskDetailById_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("findTaskDetailById_args"))

      
            {
            val elem0 = bean.id 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("id", com.isuwang.org.apache.thrift.protocol.TType.I32, 1.asInstanceOf[Short]))
            oprot.writeI32(elem0)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: findTaskDetailById_args): Unit = {
      
    }
    

            override def toString(bean: findTaskDetailById_args): String = if(bean == null)  "null" else bean.toString
            }

            class FindTaskDetailById_resultSerializer extends TCommonBeanSerializer[findTaskDetailById_result]{

            @throws[TException]
            override def read(iprot: TProtocol): findTaskDetailById_result = {

              var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              var success : com.isuwang.soa.scala.task.domain.TTaskDetail = null

              while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                    case 0 =>
                       schemeField.`type` match {
                          case com.isuwang.org.apache.thrift.protocol.TType.STRUCT =>  success = new com.isuwang.soa.scala.task.domain.serializer.TTaskDetailSerializer().read(iprot)
                          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = findTaskDetailById_result(success)
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: findTaskDetailById_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("findTaskDetailById_result"))

      
            {
            val elem0 = bean.success 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 0.asInstanceOf[Short]))
             new com.isuwang.soa.scala.task.domain.serializer.TTaskDetailSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: findTaskDetailById_result): Unit = {
      
              if(bean.success == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空")
            
                if(bean.success != null)
                new com.isuwang.soa.scala.task.domain.serializer.TTaskDetailSerializer().validate(bean.success)
              
    }
    

            override def toString(bean: findTaskDetailById_result): String = if(bean == null)  "null" else bean.toString
          }

            class findTaskDetailById extends SoaProcessFunction[com.isuwang.soa.scala.task.service.TaskAdminService, findTaskDetailById_args, findTaskDetailById_result, FindTaskDetailById_argsSerializer,  FindTaskDetailById_resultSerializer]("findTaskDetailById", new FindTaskDetailById_argsSerializer(), new FindTaskDetailById_resultSerializer()){

            override def isOneway: Boolean = false

            override def getEmptyArgsInstance: findTaskDetailById_args = null


            @throws[TException]
            def getResult(iface: com.isuwang.soa.scala.task.service.TaskAdminService, args: findTaskDetailById_args):findTaskDetailById_result = {

              val _result = iface.findTaskDetailById(args.id)
              findTaskDetailById_result(_result )
            }
          }
          
            case class createTask_args(request:com.isuwang.soa.scala.task.domain.TCreateTaskRequest)

            case class createTask_result()

            class CreateTask_argsSerializer extends TCommonBeanSerializer[createTask_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): createTask_args = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var request: com.isuwang.soa.scala.task.domain.TCreateTaskRequest = null
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRUCT => request = new com.isuwang.soa.scala.task.domain.serializer.TCreateTaskRequestSerializer().read(iprot)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = createTask_args(request = request)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: createTask_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("createTask_args"))

      
            {
            val elem0 = bean.request 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
             new com.isuwang.soa.scala.task.domain.serializer.TCreateTaskRequestSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: createTask_args): Unit = {
      
              if(bean.request == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空")
            
                if(bean.request != null)
                new com.isuwang.soa.scala.task.domain.serializer.TCreateTaskRequestSerializer().validate(bean.request)
              
    }
    

            override def toString(bean: createTask_args): String = if(bean == null)  "null" else bean.toString
            }

            class CreateTask_resultSerializer extends TCommonBeanSerializer[createTask_result]{

            @throws[TException]
            override def read(iprot: TProtocol): createTask_result = {

              var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              

              while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                    case 0 =>
                       schemeField.`type` match {
                          case com.isuwang.org.apache.thrift.protocol.TType.VOID =>  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = createTask_result()
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: createTask_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("createTask_result"))

      
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: createTask_result): Unit = {
      
    }
    

            override def toString(bean: createTask_result): String = if(bean == null)  "null" else bean.toString
          }

            class createTask extends SoaProcessFunction[com.isuwang.soa.scala.task.service.TaskAdminService, createTask_args, createTask_result, CreateTask_argsSerializer,  CreateTask_resultSerializer]("createTask", new CreateTask_argsSerializer(), new CreateTask_resultSerializer()){

            override def isOneway: Boolean = false

            override def getEmptyArgsInstance: createTask_args = null


            @throws[TException]
            def getResult(iface: com.isuwang.soa.scala.task.service.TaskAdminService, args: createTask_args):createTask_result = {

              val _result = iface.createTask(args.request)
              createTask_result( )
            }
          }
          
            case class updateTask_args(request:com.isuwang.soa.scala.task.domain.TUpdateTaskRequest)

            case class updateTask_result()

            class UpdateTask_argsSerializer extends TCommonBeanSerializer[updateTask_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): updateTask_args = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var request: com.isuwang.soa.scala.task.domain.TUpdateTaskRequest = null
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRUCT => request = new com.isuwang.soa.scala.task.domain.serializer.TUpdateTaskRequestSerializer().read(iprot)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = updateTask_args(request = request)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: updateTask_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("updateTask_args"))

      
            {
            val elem0 = bean.request 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
             new com.isuwang.soa.scala.task.domain.serializer.TUpdateTaskRequestSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: updateTask_args): Unit = {
      
              if(bean.request == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空")
            
                if(bean.request != null)
                new com.isuwang.soa.scala.task.domain.serializer.TUpdateTaskRequestSerializer().validate(bean.request)
              
    }
    

            override def toString(bean: updateTask_args): String = if(bean == null)  "null" else bean.toString
            }

            class UpdateTask_resultSerializer extends TCommonBeanSerializer[updateTask_result]{

            @throws[TException]
            override def read(iprot: TProtocol): updateTask_result = {

              var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              

              while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                    case 0 =>
                       schemeField.`type` match {
                          case com.isuwang.org.apache.thrift.protocol.TType.VOID =>  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = updateTask_result()
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: updateTask_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("updateTask_result"))

      
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: updateTask_result): Unit = {
      
    }
    

            override def toString(bean: updateTask_result): String = if(bean == null)  "null" else bean.toString
          }

            class updateTask extends SoaProcessFunction[com.isuwang.soa.scala.task.service.TaskAdminService, updateTask_args, updateTask_result, UpdateTask_argsSerializer,  UpdateTask_resultSerializer]("updateTask", new UpdateTask_argsSerializer(), new UpdateTask_resultSerializer()){

            override def isOneway: Boolean = false

            override def getEmptyArgsInstance: updateTask_args = null


            @throws[TException]
            def getResult(iface: com.isuwang.soa.scala.task.service.TaskAdminService, args: updateTask_args):updateTask_result = {

              val _result = iface.updateTask(args.request)
              updateTask_result( )
            }
          }
          
            case class unbindSubTask_args(subTaskId:Int)

            case class unbindSubTask_result()

            class UnbindSubTask_argsSerializer extends TCommonBeanSerializer[unbindSubTask_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): unbindSubTask_args = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var subTaskId: Int = 0
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.I32 => subTaskId = iprot.readI32
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = unbindSubTask_args(subTaskId = subTaskId)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: unbindSubTask_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("unbindSubTask_args"))

      
            {
            val elem0 = bean.subTaskId 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("subTaskId", com.isuwang.org.apache.thrift.protocol.TType.I32, 1.asInstanceOf[Short]))
            oprot.writeI32(elem0)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: unbindSubTask_args): Unit = {
      
    }
    

            override def toString(bean: unbindSubTask_args): String = if(bean == null)  "null" else bean.toString
            }

            class UnbindSubTask_resultSerializer extends TCommonBeanSerializer[unbindSubTask_result]{

            @throws[TException]
            override def read(iprot: TProtocol): unbindSubTask_result = {

              var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              

              while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                    case 0 =>
                       schemeField.`type` match {
                          case com.isuwang.org.apache.thrift.protocol.TType.VOID =>  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = unbindSubTask_result()
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: unbindSubTask_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("unbindSubTask_result"))

      
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: unbindSubTask_result): Unit = {
      
    }
    

            override def toString(bean: unbindSubTask_result): String = if(bean == null)  "null" else bean.toString
          }

            class unbindSubTask extends SoaProcessFunction[com.isuwang.soa.scala.task.service.TaskAdminService, unbindSubTask_args, unbindSubTask_result, UnbindSubTask_argsSerializer,  UnbindSubTask_resultSerializer]("unbindSubTask", new UnbindSubTask_argsSerializer(), new UnbindSubTask_resultSerializer()){

            override def isOneway: Boolean = false

            override def getEmptyArgsInstance: unbindSubTask_args = null


            @throws[TException]
            def getResult(iface: com.isuwang.soa.scala.task.service.TaskAdminService, args: unbindSubTask_args):unbindSubTask_result = {

              val _result = iface.unbindSubTask(args.subTaskId)
              unbindSubTask_result( )
            }
          }
          
            case class createTaskRemark_args(request:com.isuwang.soa.scala.task.domain.TSaveTaskRemark)

            case class createTaskRemark_result()

            class CreateTaskRemark_argsSerializer extends TCommonBeanSerializer[createTaskRemark_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): createTaskRemark_args = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var request: com.isuwang.soa.scala.task.domain.TSaveTaskRemark = null
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRUCT => request = new com.isuwang.soa.scala.task.domain.serializer.TSaveTaskRemarkSerializer().read(iprot)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = createTaskRemark_args(request = request)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: createTaskRemark_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("createTaskRemark_args"))

      
            {
            val elem0 = bean.request 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
             new com.isuwang.soa.scala.task.domain.serializer.TSaveTaskRemarkSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: createTaskRemark_args): Unit = {
      
              if(bean.request == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空")
            
                if(bean.request != null)
                new com.isuwang.soa.scala.task.domain.serializer.TSaveTaskRemarkSerializer().validate(bean.request)
              
    }
    

            override def toString(bean: createTaskRemark_args): String = if(bean == null)  "null" else bean.toString
            }

            class CreateTaskRemark_resultSerializer extends TCommonBeanSerializer[createTaskRemark_result]{

            @throws[TException]
            override def read(iprot: TProtocol): createTaskRemark_result = {

              var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              

              while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                    case 0 =>
                       schemeField.`type` match {
                          case com.isuwang.org.apache.thrift.protocol.TType.VOID =>  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = createTaskRemark_result()
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: createTaskRemark_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("createTaskRemark_result"))

      
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: createTaskRemark_result): Unit = {
      
    }
    

            override def toString(bean: createTaskRemark_result): String = if(bean == null)  "null" else bean.toString
          }

            class createTaskRemark extends SoaProcessFunction[com.isuwang.soa.scala.task.service.TaskAdminService, createTaskRemark_args, createTaskRemark_result, CreateTaskRemark_argsSerializer,  CreateTaskRemark_resultSerializer]("createTaskRemark", new CreateTaskRemark_argsSerializer(), new CreateTaskRemark_resultSerializer()){

            override def isOneway: Boolean = false

            override def getEmptyArgsInstance: createTaskRemark_args = null


            @throws[TException]
            def getResult(iface: com.isuwang.soa.scala.task.service.TaskAdminService, args: createTaskRemark_args):createTaskRemark_result = {

              val _result = iface.createTaskRemark(args.request)
              createTaskRemark_result( )
            }
          }
          
            case class updateTaskRemark_args(request:com.isuwang.soa.scala.task.domain.TSaveTaskRemark)

            case class updateTaskRemark_result()

            class UpdateTaskRemark_argsSerializer extends TCommonBeanSerializer[updateTaskRemark_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): updateTaskRemark_args = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var request: com.isuwang.soa.scala.task.domain.TSaveTaskRemark = null
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRUCT => request = new com.isuwang.soa.scala.task.domain.serializer.TSaveTaskRemarkSerializer().read(iprot)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = updateTaskRemark_args(request = request)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: updateTaskRemark_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("updateTaskRemark_args"))

      
            {
            val elem0 = bean.request 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
             new com.isuwang.soa.scala.task.domain.serializer.TSaveTaskRemarkSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: updateTaskRemark_args): Unit = {
      
              if(bean.request == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空")
            
                if(bean.request != null)
                new com.isuwang.soa.scala.task.domain.serializer.TSaveTaskRemarkSerializer().validate(bean.request)
              
    }
    

            override def toString(bean: updateTaskRemark_args): String = if(bean == null)  "null" else bean.toString
            }

            class UpdateTaskRemark_resultSerializer extends TCommonBeanSerializer[updateTaskRemark_result]{

            @throws[TException]
            override def read(iprot: TProtocol): updateTaskRemark_result = {

              var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              

              while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                    case 0 =>
                       schemeField.`type` match {
                          case com.isuwang.org.apache.thrift.protocol.TType.VOID =>  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = updateTaskRemark_result()
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: updateTaskRemark_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("updateTaskRemark_result"))

      
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: updateTaskRemark_result): Unit = {
      
    }
    

            override def toString(bean: updateTaskRemark_result): String = if(bean == null)  "null" else bean.toString
          }

            class updateTaskRemark extends SoaProcessFunction[com.isuwang.soa.scala.task.service.TaskAdminService, updateTaskRemark_args, updateTaskRemark_result, UpdateTaskRemark_argsSerializer,  UpdateTaskRemark_resultSerializer]("updateTaskRemark", new UpdateTaskRemark_argsSerializer(), new UpdateTaskRemark_resultSerializer()){

            override def isOneway: Boolean = false

            override def getEmptyArgsInstance: updateTaskRemark_args = null


            @throws[TException]
            def getResult(iface: com.isuwang.soa.scala.task.service.TaskAdminService, args: updateTaskRemark_args):updateTaskRemark_result = {

              val _result = iface.updateTaskRemark(args.request)
              updateTaskRemark_result( )
            }
          }
          
            case class deleteTaskRemark_args(id:Int)

            case class deleteTaskRemark_result()

            class DeleteTaskRemark_argsSerializer extends TCommonBeanSerializer[deleteTaskRemark_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): deleteTaskRemark_args = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var id: Int = 0
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.I32 => id = iprot.readI32
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = deleteTaskRemark_args(id = id)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: deleteTaskRemark_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("deleteTaskRemark_args"))

      
            {
            val elem0 = bean.id 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("id", com.isuwang.org.apache.thrift.protocol.TType.I32, 1.asInstanceOf[Short]))
            oprot.writeI32(elem0)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: deleteTaskRemark_args): Unit = {
      
    }
    

            override def toString(bean: deleteTaskRemark_args): String = if(bean == null)  "null" else bean.toString
            }

            class DeleteTaskRemark_resultSerializer extends TCommonBeanSerializer[deleteTaskRemark_result]{

            @throws[TException]
            override def read(iprot: TProtocol): deleteTaskRemark_result = {

              var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              

              while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                    case 0 =>
                       schemeField.`type` match {
                          case com.isuwang.org.apache.thrift.protocol.TType.VOID =>  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = deleteTaskRemark_result()
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: deleteTaskRemark_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("deleteTaskRemark_result"))

      
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: deleteTaskRemark_result): Unit = {
      
    }
    

            override def toString(bean: deleteTaskRemark_result): String = if(bean == null)  "null" else bean.toString
          }

            class deleteTaskRemark extends SoaProcessFunction[com.isuwang.soa.scala.task.service.TaskAdminService, deleteTaskRemark_args, deleteTaskRemark_result, DeleteTaskRemark_argsSerializer,  DeleteTaskRemark_resultSerializer]("deleteTaskRemark", new DeleteTaskRemark_argsSerializer(), new DeleteTaskRemark_resultSerializer()){

            override def isOneway: Boolean = false

            override def getEmptyArgsInstance: deleteTaskRemark_args = null


            @throws[TException]
            def getResult(iface: com.isuwang.soa.scala.task.service.TaskAdminService, args: deleteTaskRemark_args):deleteTaskRemark_result = {

              val _result = iface.deleteTaskRemark(args.id)
              deleteTaskRemark_result( )
            }
          }
          
            case class createTaskLog_args(request:com.isuwang.soa.scala.task.domain.TCreateTaskLog)

            case class createTaskLog_result()

            class CreateTaskLog_argsSerializer extends TCommonBeanSerializer[createTaskLog_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): createTaskLog_args = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var request: com.isuwang.soa.scala.task.domain.TCreateTaskLog = null
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRUCT => request = new com.isuwang.soa.scala.task.domain.serializer.TCreateTaskLogSerializer().read(iprot)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = createTaskLog_args(request = request)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: createTaskLog_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("createTaskLog_args"))

      
            {
            val elem0 = bean.request 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
             new com.isuwang.soa.scala.task.domain.serializer.TCreateTaskLogSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: createTaskLog_args): Unit = {
      
              if(bean.request == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空")
            
                if(bean.request != null)
                new com.isuwang.soa.scala.task.domain.serializer.TCreateTaskLogSerializer().validate(bean.request)
              
    }
    

            override def toString(bean: createTaskLog_args): String = if(bean == null)  "null" else bean.toString
            }

            class CreateTaskLog_resultSerializer extends TCommonBeanSerializer[createTaskLog_result]{

            @throws[TException]
            override def read(iprot: TProtocol): createTaskLog_result = {

              var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              

              while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                    case 0 =>
                       schemeField.`type` match {
                          case com.isuwang.org.apache.thrift.protocol.TType.VOID =>  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = createTaskLog_result()
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: createTaskLog_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("createTaskLog_result"))

      
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: createTaskLog_result): Unit = {
      
    }
    

            override def toString(bean: createTaskLog_result): String = if(bean == null)  "null" else bean.toString
          }

            class createTaskLog extends SoaProcessFunction[com.isuwang.soa.scala.task.service.TaskAdminService, createTaskLog_args, createTaskLog_result, CreateTaskLog_argsSerializer,  CreateTaskLog_resultSerializer]("createTaskLog", new CreateTaskLog_argsSerializer(), new CreateTaskLog_resultSerializer()){

            override def isOneway: Boolean = false

            override def getEmptyArgsInstance: createTaskLog_args = null


            @throws[TException]
            def getResult(iface: com.isuwang.soa.scala.task.service.TaskAdminService, args: createTaskLog_args):createTaskLog_result = {

              val _result = iface.createTaskLog(args.request)
              createTaskLog_result( )
            }
          }
          
            case class createTaskAttachment_args(request:com.isuwang.soa.scala.task.domain.TCreateTaskAttachment)

            case class createTaskAttachment_result(success:Int)

            class CreateTaskAttachment_argsSerializer extends TCommonBeanSerializer[createTaskAttachment_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): createTaskAttachment_args = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var request: com.isuwang.soa.scala.task.domain.TCreateTaskAttachment = null
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRUCT => request = new com.isuwang.soa.scala.task.domain.serializer.TCreateTaskAttachmentSerializer().read(iprot)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = createTaskAttachment_args(request = request)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: createTaskAttachment_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("createTaskAttachment_args"))

      
            {
            val elem0 = bean.request 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
             new com.isuwang.soa.scala.task.domain.serializer.TCreateTaskAttachmentSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: createTaskAttachment_args): Unit = {
      
              if(bean.request == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空")
            
                if(bean.request != null)
                new com.isuwang.soa.scala.task.domain.serializer.TCreateTaskAttachmentSerializer().validate(bean.request)
              
    }
    

            override def toString(bean: createTaskAttachment_args): String = if(bean == null)  "null" else bean.toString
            }

            class CreateTaskAttachment_resultSerializer extends TCommonBeanSerializer[createTaskAttachment_result]{

            @throws[TException]
            override def read(iprot: TProtocol): createTaskAttachment_result = {

              var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              var success : Int = 0

              while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                    case 0 =>
                       schemeField.`type` match {
                          case com.isuwang.org.apache.thrift.protocol.TType.I32 =>  success = iprot.readI32
                          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = createTaskAttachment_result(success)
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: createTaskAttachment_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("createTaskAttachment_result"))

      
            {
            val elem0 = bean.success 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.I32, 0.asInstanceOf[Short]))
            oprot.writeI32(elem0)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: createTaskAttachment_result): Unit = {
      
    }
    

            override def toString(bean: createTaskAttachment_result): String = if(bean == null)  "null" else bean.toString
          }

            class createTaskAttachment extends SoaProcessFunction[com.isuwang.soa.scala.task.service.TaskAdminService, createTaskAttachment_args, createTaskAttachment_result, CreateTaskAttachment_argsSerializer,  CreateTaskAttachment_resultSerializer]("createTaskAttachment", new CreateTaskAttachment_argsSerializer(), new CreateTaskAttachment_resultSerializer()){

            override def isOneway: Boolean = false

            override def getEmptyArgsInstance: createTaskAttachment_args = null


            @throws[TException]
            def getResult(iface: com.isuwang.soa.scala.task.service.TaskAdminService, args: createTaskAttachment_args):createTaskAttachment_result = {

              val _result = iface.createTaskAttachment(args.request)
              createTaskAttachment_result(_result )
            }
          }
          
            case class deleteTaskAttachment_args(id:Int)

            case class deleteTaskAttachment_result()

            class DeleteTaskAttachment_argsSerializer extends TCommonBeanSerializer[deleteTaskAttachment_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): deleteTaskAttachment_args = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var id: Int = 0
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.I32 => id = iprot.readI32
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = deleteTaskAttachment_args(id = id)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: deleteTaskAttachment_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("deleteTaskAttachment_args"))

      
            {
            val elem0 = bean.id 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("id", com.isuwang.org.apache.thrift.protocol.TType.I32, 1.asInstanceOf[Short]))
            oprot.writeI32(elem0)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: deleteTaskAttachment_args): Unit = {
      
    }
    

            override def toString(bean: deleteTaskAttachment_args): String = if(bean == null)  "null" else bean.toString
            }

            class DeleteTaskAttachment_resultSerializer extends TCommonBeanSerializer[deleteTaskAttachment_result]{

            @throws[TException]
            override def read(iprot: TProtocol): deleteTaskAttachment_result = {

              var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              

              while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                    case 0 =>
                       schemeField.`type` match {
                          case com.isuwang.org.apache.thrift.protocol.TType.VOID =>  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = deleteTaskAttachment_result()
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: deleteTaskAttachment_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("deleteTaskAttachment_result"))

      
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: deleteTaskAttachment_result): Unit = {
      
    }
    

            override def toString(bean: deleteTaskAttachment_result): String = if(bean == null)  "null" else bean.toString
          }

            class deleteTaskAttachment extends SoaProcessFunction[com.isuwang.soa.scala.task.service.TaskAdminService, deleteTaskAttachment_args, deleteTaskAttachment_result, DeleteTaskAttachment_argsSerializer,  DeleteTaskAttachment_resultSerializer]("deleteTaskAttachment", new DeleteTaskAttachment_argsSerializer(), new DeleteTaskAttachment_resultSerializer()){

            override def isOneway: Boolean = false

            override def getEmptyArgsInstance: deleteTaskAttachment_args = null


            @throws[TException]
            def getResult(iface: com.isuwang.soa.scala.task.service.TaskAdminService, args: deleteTaskAttachment_args):deleteTaskAttachment_result = {

              val _result = iface.deleteTaskAttachment(args.id)
              deleteTaskAttachment_result( )
            }
          }
          
            case class findAllTaskNos4Picker_args()

            case class findAllTaskNos4Picker_result(success:List[com.isuwang.soa.scala.task.domain.TTaskPickerContainer])

            class FindAllTaskNos4Picker_argsSerializer extends TCommonBeanSerializer[findAllTaskNos4Picker_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): findAllTaskNos4Picker_args = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = findAllTaskNos4Picker_args()
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: findAllTaskNos4Picker_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("findAllTaskNos4Picker_args"))

      
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: findAllTaskNos4Picker_args): Unit = {
      
    }
    

            override def toString(bean: findAllTaskNos4Picker_args): String = if(bean == null)  "null" else bean.toString
            }

            class FindAllTaskNos4Picker_resultSerializer extends TCommonBeanSerializer[findAllTaskNos4Picker_result]{

            @throws[TException]
            override def read(iprot: TProtocol): findAllTaskNos4Picker_result = {

              var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              var success : List[com.isuwang.soa.scala.task.domain.TTaskPickerContainer] = List.empty

              while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                    case 0 =>
                       schemeField.`type` match {
                          case com.isuwang.org.apache.thrift.protocol.TType.LIST =>  success = {
        val _list0 : com.isuwang.org.apache.thrift.protocol.TList = iprot.readListBegin
        val _result0 = (0 until _list0.size).map(_ => {new com.isuwang.soa.scala.task.domain.serializer.TTaskPickerContainerSerializer().read(iprot)}).toList
        iprot.readListEnd
        _result0
        }
                          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = findAllTaskNos4Picker_result(success)
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: findAllTaskNos4Picker_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("findAllTaskNos4Picker_result"))

      
            {
            val elem0 = bean.success 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.LIST, 0.asInstanceOf[Short]))
            
        oprot.writeListBegin(new com.isuwang.org.apache.thrift.protocol.TList(com.isuwang.org.apache.thrift.protocol.TType.STRUCT, elem0.size))
        elem0.foreach(elem1 => { new com.isuwang.soa.scala.task.domain.serializer.TTaskPickerContainerSerializer().write(elem1, oprot)})
        oprot.writeListEnd
      
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: findAllTaskNos4Picker_result): Unit = {
      
              if(bean.success == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空")
            
    }
    

            override def toString(bean: findAllTaskNos4Picker_result): String = if(bean == null)  "null" else bean.toString
          }

            class findAllTaskNos4Picker extends SoaProcessFunction[com.isuwang.soa.scala.task.service.TaskAdminService, findAllTaskNos4Picker_args, findAllTaskNos4Picker_result, FindAllTaskNos4Picker_argsSerializer,  FindAllTaskNos4Picker_resultSerializer]("findAllTaskNos4Picker", new FindAllTaskNos4Picker_argsSerializer(), new FindAllTaskNos4Picker_resultSerializer()){

            override def isOneway: Boolean = false

            override def getEmptyArgsInstance: findAllTaskNos4Picker_args = null


            @throws[TException]
            def getResult(iface: com.isuwang.soa.scala.task.service.TaskAdminService, args: findAllTaskNos4Picker_args):findAllTaskNos4Picker_result = {

              val _result = iface.findAllTaskNos4Picker()
              findAllTaskNos4Picker_result(_result )
            }
          }
          

        case class getServiceMetadata_args()

        case class getServiceMetadata_result(success: String)

        class GetServiceMetadata_argsSerializer extends TCommonBeanSerializer[getServiceMetadata_args] {

          @throws[TException]
          override def read(iprot: TProtocol): getServiceMetadata_args = {

            iprot.readStructBegin

            var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null

            while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {
              schemeField = iprot.readFieldBegin
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
              iprot.readFieldEnd
            }

            iprot.readStructEnd

            val bean = getServiceMetadata_args()
            validate(bean)

            bean
          }

          @throws[TException]
          override def write(bean: getServiceMetadata_args, oproto: TProtocol): Unit = {
            validate(bean)
            oproto.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getServiceMetadata_args"))

            oproto.writeFieldStop
            oproto.writeStructEnd
          }

          @throws[TException]
          override def validate(bean: getServiceMetadata_args): Unit = {}

          override def toString(bean: getServiceMetadata_args): String = if (bean == null) "null" else bean.toString
        }



        class GetServiceMetadata_resultSerializer extends TCommonBeanSerializer[getServiceMetadata_result] {
          @throws[TException]
          override def read(iprot: TProtocol): getServiceMetadata_result = {
            iprot.readStructBegin

            var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null

            var success: String = null

            while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {
              schemeField = iprot.readFieldBegin

              schemeField.id match {
                case 0 =>
                schemeField.`type` match {
                  case com.isuwang.org.apache.thrift.protocol.TType.STRING => success = iprot.readString
                  case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }
                case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
              }
              iprot.readFieldEnd
            }

            iprot.readStructEnd
            val bean = getServiceMetadata_result(success)
            validate(bean)

            bean
          }

          @throws[TException]
          override def write(bean: getServiceMetadata_result, oproto: TProtocol): Unit = {
            validate(bean)
            oproto.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getServiceMetadata_result"))

            oproto.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRING, 0.asInstanceOf[Short]))
            oproto.writeString(bean.success)
            oproto.writeFieldEnd

            oproto.writeFieldStop
            oproto.writeStructEnd
          }

          @throws[TException]
          override def validate(bean: getServiceMetadata_result): Unit = {
            if (bean.success == null)
            throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空")
          }

          override def toString(bean: getServiceMetadata_result): String = if (bean == null) "null" else bean.toString

        }



  class getServiceMetadata extends SoaProcessFunction[com.isuwang.soa.scala.task.service.TaskAdminService, getServiceMetadata_args, getServiceMetadata_result, GetServiceMetadata_argsSerializer, GetServiceMetadata_resultSerializer](
  "getServiceMetadata", new GetServiceMetadata_argsSerializer(), new GetServiceMetadata_resultSerializer()) {

      override def isOneway: Boolean = false

      override def getEmptyArgsInstance: getServiceMetadata_args = getServiceMetadata_args()

      @throws[TException]
      override def getResult(iface: com.isuwang.soa.scala.task.service.TaskAdminService, args: getServiceMetadata_args): getServiceMetadata_result = {

        val source = scala.io.Source.fromInputStream(TaskAdminServiceCodec.getClass.getClassLoader.getResourceAsStream("com.isuwang.soa.scala.task.service.TaskAdminService.xml"))
        val success = source.mkString
        source.close
        getServiceMetadata_result(success)
      }
      }

      class Processor(iface: com.isuwang.soa.scala.task.service.TaskAdminService) extends SoaCommonBaseProcessor(iface, Processor.getProcessMap)

        object Processor{

          type PF = SoaProcessFunction[com.isuwang.soa.scala.task.service.TaskAdminService, _, _, _ <: TCommonBeanSerializer[_], _ <: TCommonBeanSerializer[_]]

          def getProcessMap(): java.util.Map[String, PF] = {
             val map = new java.util.HashMap[String, PF]()
            map.put("findTasks", new findTasks)
              map.put("findTaskDetailById", new findTaskDetailById)
              map.put("createTask", new createTask)
              map.put("updateTask", new updateTask)
              map.put("unbindSubTask", new unbindSubTask)
              map.put("createTaskRemark", new createTaskRemark)
              map.put("updateTaskRemark", new updateTaskRemark)
              map.put("deleteTaskRemark", new deleteTaskRemark)
              map.put("createTaskLog", new createTaskLog)
              map.put("createTaskAttachment", new createTaskAttachment)
              map.put("deleteTaskAttachment", new deleteTaskAttachment)
              map.put("findAllTaskNos4Picker", new findAllTaskNos4Picker)
              
            map.put("getServiceMetadata", new getServiceMetadata)
            map
          }

        }
        }
      