package com.isuwang.soa.scala.task

        import com.isuwang.dapeng.core._
        import com.isuwang.org.apache.thrift._
        import com.isuwang.dapeng.remoting.BaseCommonServiceClient
        import com.isuwang.soa.scala.task.TaskSuggestionServiceCodec._

        /**
         * Autogenerated by Dapeng-Code-Generator (1.2.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated

        **/
        object TaskSuggestionServiceClient extends BaseCommonServiceClient("com.isuwang.soa.scala.task.service.TaskSuggestionService", "1.0.0"){

        override def isSoaTransactionalProcess: Boolean = {

          var isSoaTransactionalProcess = false
          
          isSoaTransactionalProcess
        }

        
         /**
         * 
         **/

            def findSuggestions(request:com.isuwang.soa.scala.task.domain.TSuggestionRequest ) : com.isuwang.soa.scala.task.domain.TSuggestionResponse = {

            initContext("findSuggestions");

            try {
              val response = sendBase(findSuggestions_args(request), new FindSuggestions_argsSerializer(), new FindSuggestions_resultSerializer())

              response.success

            }catch{
              case e: SoaException => throw e
              case e: TException => throw new SoaException(e)
            }
            finally {
              destoryContext();
            }
            }
          
         /**
         * 
         **/

            def createSuggestion(request:com.isuwang.soa.scala.task.domain.TSaveSuggestion ) : Unit = {

            initContext("createSuggestion");

            try {
              val response = sendBase(createSuggestion_args(request), new CreateSuggestion_argsSerializer(), new CreateSuggestion_resultSerializer())

              

            }catch{
              case e: SoaException => throw e
              case e: TException => throw new SoaException(e)
            }
            finally {
              destoryContext();
            }
            }
          
         /**
         * 
         **/

            def updateSuggestion(request:com.isuwang.soa.scala.task.domain.TSaveSuggestion ) : Unit = {

            initContext("updateSuggestion");

            try {
              val response = sendBase(updateSuggestion_args(request), new UpdateSuggestion_argsSerializer(), new UpdateSuggestion_resultSerializer())

              

            }catch{
              case e: SoaException => throw e
              case e: TException => throw new SoaException(e)
            }
            finally {
              destoryContext();
            }
            }
          
         /**
         * 
         **/

            def deleteSuggestion(id:Int ) : Unit = {

            initContext("deleteSuggestion");

            try {
              val response = sendBase(deleteSuggestion_args(id), new DeleteSuggestion_argsSerializer(), new DeleteSuggestion_resultSerializer())

              

            }catch{
              case e: SoaException => throw e
              case e: TException => throw new SoaException(e)
            }
            finally {
              destoryContext();
            }
            }
          
         /**
         * 
         **/

            def findAllSuggestions4PickerByType(`type`:Int ) : List[com.isuwang.soa.scala.task.domain.TSuggestion4Picker] = {

            initContext("findAllSuggestions4PickerByType");

            try {
              val response = sendBase(findAllSuggestions4PickerByType_args(`type`), new FindAllSuggestions4PickerByType_argsSerializer(), new FindAllSuggestions4PickerByType_resultSerializer())

              response.success

            }catch{
              case e: SoaException => throw e
              case e: TException => throw new SoaException(e)
            }
            finally {
              destoryContext();
            }
            }
          

        /**
        * getServiceMetadata
        **/
        @throws[SoaException]
        def getServiceMetadata: String = {
          initContext("getServiceMetadata")
          try {
            val _request = new getServiceMetadata_args()
            val _response = sendBase(_request, new GetServiceMetadata_argsSerializer(), new GetServiceMetadata_resultSerializer())
            _response.success
          }catch{
            case e: SoaException => throw e
            case e: TException => throw new SoaException(e)
          }
          finally {
            destoryContext()
          }
        }

        }
      