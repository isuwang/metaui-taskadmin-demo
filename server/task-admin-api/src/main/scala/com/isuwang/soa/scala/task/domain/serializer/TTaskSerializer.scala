 package com.isuwang.soa.scala.task.domain.serializer;

        import com.isuwang.soa.scala.common.util.serializer._;import com.isuwang.soa.scala.task.domain.serializer._;
        import com.isuwang.dapeng.core._
        import com.isuwang.org.apache.thrift._
        import com.isuwang.org.apache.thrift.protocol._

        /**
        * Autogenerated by Dapeng-Code-Generator (1.2.2)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *  @generated
        **/

        class TTaskSerializer extends TCommonBeanSerializer[com.isuwang.soa.scala.task.domain.TTask]{
          
      @throws[TException]
      override def read(iprot: TProtocol): com.isuwang.soa.scala.task.domain.TTask = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var id: Int = 0
        var parentTaskId: Option[Int] = None
        var taskNo: String = null
        var companyId: Option[Int] = None
        var companyName: Option[String] = None
        var taskSubject: String = null
        var status: Int = 0
        var `type`: Int = 0
        var businessTypeId: Int = 0
        var businessTypeName: String = null
        var priority: Int = 0
        var planAt: Option[Long] = None
        var communicationStyle: Option[Int] = None
        var handlerId: Option[Int] = None
        var problemDesc: Option[String] = None
        var resultDesc: Option[String] = None
        var createdAt: Long = 0
        var createdBy: Option[Int] = None
        var updatedAt: Long = 0
        var updatedBy: Option[Int] = None
        var handlerName: Option[String] = None
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.I32 => id = iprot.readI32
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 2 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.I32 => parentTaskId = Option(iprot.readI32)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 3 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRING => taskNo = iprot.readString
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 4 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.I32 => companyId = Option(iprot.readI32)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 5 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRING => companyName = Option(iprot.readString)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 25 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRING => taskSubject = iprot.readString
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 6 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.I32 => status = iprot.readI32
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 7 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.I32 => `type` = iprot.readI32
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 8 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.I32 => businessTypeId = iprot.readI32
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 9 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRING => businessTypeName = iprot.readString
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 10 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.I32 => priority = iprot.readI32
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 11 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.I64 => planAt = Option(iprot.readI64)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 12 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.I32 => communicationStyle = Option(iprot.readI32)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 13 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.I32 => handlerId = Option(iprot.readI32)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 14 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRING => problemDesc = Option(iprot.readString)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 15 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRING => resultDesc = Option(iprot.readString)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 16 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.I64 => createdAt = iprot.readI64
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 17 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.I32 => createdBy = Option(iprot.readI32)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 18 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.I64 => updatedAt = iprot.readI64
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 19 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.I32 => updatedBy = Option(iprot.readI32)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 26 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRING => handlerName = Option(iprot.readString)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = com.isuwang.soa.scala.task.domain.TTask(id = id,parentTaskId = parentTaskId,taskNo = taskNo,companyId = companyId,companyName = companyName,taskSubject = taskSubject,status = status,`type` = `type`,businessTypeId = businessTypeId,businessTypeName = businessTypeName,priority = priority,planAt = planAt,communicationStyle = communicationStyle,handlerId = handlerId,problemDesc = problemDesc,resultDesc = resultDesc,createdAt = createdAt,createdBy = createdBy,updatedAt = updatedAt,updatedBy = updatedBy,handlerName = handlerName)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: com.isuwang.soa.scala.task.domain.TTask, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("TTask"))

      
            {
            val elem0 = bean.id 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("id", com.isuwang.org.apache.thrift.protocol.TType.I32, 1.asInstanceOf[Short]))
            oprot.writeI32(elem0)
            oprot.writeFieldEnd
            
            }
            if(bean.parentTaskId.isDefined){
            val elem1 = bean.parentTaskId .get
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("parentTaskId", com.isuwang.org.apache.thrift.protocol.TType.I32, 2.asInstanceOf[Short]))
            oprot.writeI32(elem1)
            oprot.writeFieldEnd
            
            }
            {
            val elem2 = bean.taskNo 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("taskNo", com.isuwang.org.apache.thrift.protocol.TType.STRING, 3.asInstanceOf[Short]))
            oprot.writeString(elem2)
            oprot.writeFieldEnd
            
            }
            if(bean.companyId.isDefined){
            val elem3 = bean.companyId .get
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("companyId", com.isuwang.org.apache.thrift.protocol.TType.I32, 4.asInstanceOf[Short]))
            oprot.writeI32(elem3)
            oprot.writeFieldEnd
            
            }
            if(bean.companyName.isDefined){
            val elem4 = bean.companyName .get
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("companyName", com.isuwang.org.apache.thrift.protocol.TType.STRING, 5.asInstanceOf[Short]))
            oprot.writeString(elem4)
            oprot.writeFieldEnd
            
            }
            {
            val elem5 = bean.taskSubject 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("taskSubject", com.isuwang.org.apache.thrift.protocol.TType.STRING, 25.asInstanceOf[Short]))
            oprot.writeString(elem5)
            oprot.writeFieldEnd
            
            }
            {
            val elem6 = bean.status 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("status", com.isuwang.org.apache.thrift.protocol.TType.I32, 6.asInstanceOf[Short]))
            oprot.writeI32(elem6)
            oprot.writeFieldEnd
            
            }
            {
            val elem7 = bean.`type` 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("`type`", com.isuwang.org.apache.thrift.protocol.TType.I32, 7.asInstanceOf[Short]))
            oprot.writeI32(elem7)
            oprot.writeFieldEnd
            
            }
            {
            val elem8 = bean.businessTypeId 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("businessTypeId", com.isuwang.org.apache.thrift.protocol.TType.I32, 8.asInstanceOf[Short]))
            oprot.writeI32(elem8)
            oprot.writeFieldEnd
            
            }
            {
            val elem9 = bean.businessTypeName 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("businessTypeName", com.isuwang.org.apache.thrift.protocol.TType.STRING, 9.asInstanceOf[Short]))
            oprot.writeString(elem9)
            oprot.writeFieldEnd
            
            }
            {
            val elem10 = bean.priority 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("priority", com.isuwang.org.apache.thrift.protocol.TType.I32, 10.asInstanceOf[Short]))
            oprot.writeI32(elem10)
            oprot.writeFieldEnd
            
            }
            if(bean.planAt.isDefined){
            val elem11 = bean.planAt .get
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("planAt", com.isuwang.org.apache.thrift.protocol.TType.I64, 11.asInstanceOf[Short]))
            oprot.writeI64(elem11)
            oprot.writeFieldEnd
            
            }
            if(bean.communicationStyle.isDefined){
            val elem12 = bean.communicationStyle .get
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("communicationStyle", com.isuwang.org.apache.thrift.protocol.TType.I32, 12.asInstanceOf[Short]))
            oprot.writeI32(elem12)
            oprot.writeFieldEnd
            
            }
            if(bean.handlerId.isDefined){
            val elem13 = bean.handlerId .get
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("handlerId", com.isuwang.org.apache.thrift.protocol.TType.I32, 13.asInstanceOf[Short]))
            oprot.writeI32(elem13)
            oprot.writeFieldEnd
            
            }
            if(bean.problemDesc.isDefined){
            val elem14 = bean.problemDesc .get
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("problemDesc", com.isuwang.org.apache.thrift.protocol.TType.STRING, 14.asInstanceOf[Short]))
            oprot.writeString(elem14)
            oprot.writeFieldEnd
            
            }
            if(bean.resultDesc.isDefined){
            val elem15 = bean.resultDesc .get
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("resultDesc", com.isuwang.org.apache.thrift.protocol.TType.STRING, 15.asInstanceOf[Short]))
            oprot.writeString(elem15)
            oprot.writeFieldEnd
            
            }
            {
            val elem16 = bean.createdAt 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("createdAt", com.isuwang.org.apache.thrift.protocol.TType.I64, 16.asInstanceOf[Short]))
            oprot.writeI64(elem16)
            oprot.writeFieldEnd
            
            }
            if(bean.createdBy.isDefined){
            val elem17 = bean.createdBy .get
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("createdBy", com.isuwang.org.apache.thrift.protocol.TType.I32, 17.asInstanceOf[Short]))
            oprot.writeI32(elem17)
            oprot.writeFieldEnd
            
            }
            {
            val elem18 = bean.updatedAt 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("updatedAt", com.isuwang.org.apache.thrift.protocol.TType.I64, 18.asInstanceOf[Short]))
            oprot.writeI64(elem18)
            oprot.writeFieldEnd
            
            }
            if(bean.updatedBy.isDefined){
            val elem19 = bean.updatedBy .get
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("updatedBy", com.isuwang.org.apache.thrift.protocol.TType.I32, 19.asInstanceOf[Short]))
            oprot.writeI32(elem19)
            oprot.writeFieldEnd
            
            }
            if(bean.handlerName.isDefined){
            val elem20 = bean.handlerName .get
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("handlerName", com.isuwang.org.apache.thrift.protocol.TType.STRING, 26.asInstanceOf[Short]))
            oprot.writeString(elem20)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: com.isuwang.soa.scala.task.domain.TTask): Unit = {
      
              if(bean.taskNo == null)
              throw new SoaException(SoaBaseCode.NotNull, "taskNo字段不允许为空")
            
              if(bean.taskSubject == null)
              throw new SoaException(SoaBaseCode.NotNull, "taskSubject字段不允许为空")
            
              if(bean.businessTypeName == null)
              throw new SoaException(SoaBaseCode.NotNull, "businessTypeName字段不允许为空")
            
    }
    

          @throws[TException]
          override def toString(bean: com.isuwang.soa.scala.task.domain.TTask): String = if (bean == null) "null" else bean.toString

        }
        
      