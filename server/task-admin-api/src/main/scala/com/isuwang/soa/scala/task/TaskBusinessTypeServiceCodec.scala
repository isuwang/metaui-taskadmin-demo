package com.isuwang.soa.scala.task
        import com.isuwang.soa.scala.common.util.serializer._;import com.isuwang.soa.scala.task.domain.serializer._;

        import com.isuwang.dapeng.core._
        import com.isuwang.org.apache.thrift._
        import com.isuwang.org.apache.thrift.protocol._

        /**
        * Autogenerated by Dapeng-Code-Generator (1.2.2)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *  @generated
        **/
        object TaskBusinessTypeServiceCodec {

        
            case class findBusinessTypes_args(request:com.isuwang.soa.scala.task.domain.TBusinessTypeRequest)

            case class findBusinessTypes_result(success:com.isuwang.soa.scala.task.domain.TBusinessTypeResponse)

            class FindBusinessTypes_argsSerializer extends TCommonBeanSerializer[findBusinessTypes_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): findBusinessTypes_args = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var request: com.isuwang.soa.scala.task.domain.TBusinessTypeRequest = null
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRUCT => request = new com.isuwang.soa.scala.task.domain.serializer.TBusinessTypeRequestSerializer().read(iprot)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = findBusinessTypes_args(request = request)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: findBusinessTypes_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("findBusinessTypes_args"))

      
            {
            val elem0 = bean.request 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
             new com.isuwang.soa.scala.task.domain.serializer.TBusinessTypeRequestSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: findBusinessTypes_args): Unit = {
      
              if(bean.request == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空")
            
                if(bean.request != null)
                new com.isuwang.soa.scala.task.domain.serializer.TBusinessTypeRequestSerializer().validate(bean.request)
              
    }
    

            override def toString(bean: findBusinessTypes_args): String = if(bean == null)  "null" else bean.toString
            }

            class FindBusinessTypes_resultSerializer extends TCommonBeanSerializer[findBusinessTypes_result]{

            @throws[TException]
            override def read(iprot: TProtocol): findBusinessTypes_result = {

              var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              var success : com.isuwang.soa.scala.task.domain.TBusinessTypeResponse = null

              while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                    case 0 =>
                       schemeField.`type` match {
                          case com.isuwang.org.apache.thrift.protocol.TType.STRUCT =>  success = new com.isuwang.soa.scala.task.domain.serializer.TBusinessTypeResponseSerializer().read(iprot)
                          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = findBusinessTypes_result(success)
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: findBusinessTypes_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("findBusinessTypes_result"))

      
            {
            val elem0 = bean.success 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 0.asInstanceOf[Short]))
             new com.isuwang.soa.scala.task.domain.serializer.TBusinessTypeResponseSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: findBusinessTypes_result): Unit = {
      
              if(bean.success == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空")
            
                if(bean.success != null)
                new com.isuwang.soa.scala.task.domain.serializer.TBusinessTypeResponseSerializer().validate(bean.success)
              
    }
    

            override def toString(bean: findBusinessTypes_result): String = if(bean == null)  "null" else bean.toString
          }

            class findBusinessTypes extends SoaProcessFunction[com.isuwang.soa.scala.task.service.TaskBusinessTypeService, findBusinessTypes_args, findBusinessTypes_result, FindBusinessTypes_argsSerializer,  FindBusinessTypes_resultSerializer]("findBusinessTypes", new FindBusinessTypes_argsSerializer(), new FindBusinessTypes_resultSerializer()){

            override def isOneway: Boolean = false

            override def getEmptyArgsInstance: findBusinessTypes_args = null


            @throws[TException]
            def getResult(iface: com.isuwang.soa.scala.task.service.TaskBusinessTypeService, args: findBusinessTypes_args):findBusinessTypes_result = {

              val _result = iface.findBusinessTypes(args.request)
              findBusinessTypes_result(_result )
            }
          }
          
            case class createBusinessType_args(request:com.isuwang.soa.scala.task.domain.TSaveBusinessType)

            case class createBusinessType_result()

            class CreateBusinessType_argsSerializer extends TCommonBeanSerializer[createBusinessType_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): createBusinessType_args = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var request: com.isuwang.soa.scala.task.domain.TSaveBusinessType = null
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRUCT => request = new com.isuwang.soa.scala.task.domain.serializer.TSaveBusinessTypeSerializer().read(iprot)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = createBusinessType_args(request = request)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: createBusinessType_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("createBusinessType_args"))

      
            {
            val elem0 = bean.request 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
             new com.isuwang.soa.scala.task.domain.serializer.TSaveBusinessTypeSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: createBusinessType_args): Unit = {
      
              if(bean.request == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空")
            
                if(bean.request != null)
                new com.isuwang.soa.scala.task.domain.serializer.TSaveBusinessTypeSerializer().validate(bean.request)
              
    }
    

            override def toString(bean: createBusinessType_args): String = if(bean == null)  "null" else bean.toString
            }

            class CreateBusinessType_resultSerializer extends TCommonBeanSerializer[createBusinessType_result]{

            @throws[TException]
            override def read(iprot: TProtocol): createBusinessType_result = {

              var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              

              while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                    case 0 =>
                       schemeField.`type` match {
                          case com.isuwang.org.apache.thrift.protocol.TType.VOID =>  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = createBusinessType_result()
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: createBusinessType_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("createBusinessType_result"))

      
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: createBusinessType_result): Unit = {
      
    }
    

            override def toString(bean: createBusinessType_result): String = if(bean == null)  "null" else bean.toString
          }

            class createBusinessType extends SoaProcessFunction[com.isuwang.soa.scala.task.service.TaskBusinessTypeService, createBusinessType_args, createBusinessType_result, CreateBusinessType_argsSerializer,  CreateBusinessType_resultSerializer]("createBusinessType", new CreateBusinessType_argsSerializer(), new CreateBusinessType_resultSerializer()){

            override def isOneway: Boolean = false

            override def getEmptyArgsInstance: createBusinessType_args = null


            @throws[TException]
            def getResult(iface: com.isuwang.soa.scala.task.service.TaskBusinessTypeService, args: createBusinessType_args):createBusinessType_result = {

              val _result = iface.createBusinessType(args.request)
              createBusinessType_result( )
            }
          }
          
            case class updateBusinessType_args(request:com.isuwang.soa.scala.task.domain.TSaveBusinessType)

            case class updateBusinessType_result()

            class UpdateBusinessType_argsSerializer extends TCommonBeanSerializer[updateBusinessType_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): updateBusinessType_args = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var request: com.isuwang.soa.scala.task.domain.TSaveBusinessType = null
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRUCT => request = new com.isuwang.soa.scala.task.domain.serializer.TSaveBusinessTypeSerializer().read(iprot)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = updateBusinessType_args(request = request)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: updateBusinessType_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("updateBusinessType_args"))

      
            {
            val elem0 = bean.request 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
             new com.isuwang.soa.scala.task.domain.serializer.TSaveBusinessTypeSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: updateBusinessType_args): Unit = {
      
              if(bean.request == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空")
            
                if(bean.request != null)
                new com.isuwang.soa.scala.task.domain.serializer.TSaveBusinessTypeSerializer().validate(bean.request)
              
    }
    

            override def toString(bean: updateBusinessType_args): String = if(bean == null)  "null" else bean.toString
            }

            class UpdateBusinessType_resultSerializer extends TCommonBeanSerializer[updateBusinessType_result]{

            @throws[TException]
            override def read(iprot: TProtocol): updateBusinessType_result = {

              var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              

              while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                    case 0 =>
                       schemeField.`type` match {
                          case com.isuwang.org.apache.thrift.protocol.TType.VOID =>  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = updateBusinessType_result()
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: updateBusinessType_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("updateBusinessType_result"))

      
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: updateBusinessType_result): Unit = {
      
    }
    

            override def toString(bean: updateBusinessType_result): String = if(bean == null)  "null" else bean.toString
          }

            class updateBusinessType extends SoaProcessFunction[com.isuwang.soa.scala.task.service.TaskBusinessTypeService, updateBusinessType_args, updateBusinessType_result, UpdateBusinessType_argsSerializer,  UpdateBusinessType_resultSerializer]("updateBusinessType", new UpdateBusinessType_argsSerializer(), new UpdateBusinessType_resultSerializer()){

            override def isOneway: Boolean = false

            override def getEmptyArgsInstance: updateBusinessType_args = null


            @throws[TException]
            def getResult(iface: com.isuwang.soa.scala.task.service.TaskBusinessTypeService, args: updateBusinessType_args):updateBusinessType_result = {

              val _result = iface.updateBusinessType(args.request)
              updateBusinessType_result( )
            }
          }
          
            case class deleteBusinessType_args(id:Int)

            case class deleteBusinessType_result()

            class DeleteBusinessType_argsSerializer extends TCommonBeanSerializer[deleteBusinessType_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): deleteBusinessType_args = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var id: Int = 0
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.I32 => id = iprot.readI32
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = deleteBusinessType_args(id = id)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: deleteBusinessType_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("deleteBusinessType_args"))

      
            {
            val elem0 = bean.id 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("id", com.isuwang.org.apache.thrift.protocol.TType.I32, 1.asInstanceOf[Short]))
            oprot.writeI32(elem0)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: deleteBusinessType_args): Unit = {
      
    }
    

            override def toString(bean: deleteBusinessType_args): String = if(bean == null)  "null" else bean.toString
            }

            class DeleteBusinessType_resultSerializer extends TCommonBeanSerializer[deleteBusinessType_result]{

            @throws[TException]
            override def read(iprot: TProtocol): deleteBusinessType_result = {

              var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              

              while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                    case 0 =>
                       schemeField.`type` match {
                          case com.isuwang.org.apache.thrift.protocol.TType.VOID =>  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = deleteBusinessType_result()
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: deleteBusinessType_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("deleteBusinessType_result"))

      
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: deleteBusinessType_result): Unit = {
      
    }
    

            override def toString(bean: deleteBusinessType_result): String = if(bean == null)  "null" else bean.toString
          }

            class deleteBusinessType extends SoaProcessFunction[com.isuwang.soa.scala.task.service.TaskBusinessTypeService, deleteBusinessType_args, deleteBusinessType_result, DeleteBusinessType_argsSerializer,  DeleteBusinessType_resultSerializer]("deleteBusinessType", new DeleteBusinessType_argsSerializer(), new DeleteBusinessType_resultSerializer()){

            override def isOneway: Boolean = false

            override def getEmptyArgsInstance: deleteBusinessType_args = null


            @throws[TException]
            def getResult(iface: com.isuwang.soa.scala.task.service.TaskBusinessTypeService, args: deleteBusinessType_args):deleteBusinessType_result = {

              val _result = iface.deleteBusinessType(args.id)
              deleteBusinessType_result( )
            }
          }
          
            case class findAllBusinessTypes4Picker_args()

            case class findAllBusinessTypes4Picker_result(success:List[com.isuwang.soa.scala.task.domain.TTaskPickerContainer])

            class FindAllBusinessTypes4Picker_argsSerializer extends TCommonBeanSerializer[findAllBusinessTypes4Picker_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): findAllBusinessTypes4Picker_args = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = findAllBusinessTypes4Picker_args()
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: findAllBusinessTypes4Picker_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("findAllBusinessTypes4Picker_args"))

      
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: findAllBusinessTypes4Picker_args): Unit = {
      
    }
    

            override def toString(bean: findAllBusinessTypes4Picker_args): String = if(bean == null)  "null" else bean.toString
            }

            class FindAllBusinessTypes4Picker_resultSerializer extends TCommonBeanSerializer[findAllBusinessTypes4Picker_result]{

            @throws[TException]
            override def read(iprot: TProtocol): findAllBusinessTypes4Picker_result = {

              var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              var success : List[com.isuwang.soa.scala.task.domain.TTaskPickerContainer] = List.empty

              while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                    case 0 =>
                       schemeField.`type` match {
                          case com.isuwang.org.apache.thrift.protocol.TType.LIST =>  success = {
        val _list0 : com.isuwang.org.apache.thrift.protocol.TList = iprot.readListBegin
        val _result0 = (0 until _list0.size).map(_ => {new com.isuwang.soa.scala.task.domain.serializer.TTaskPickerContainerSerializer().read(iprot)}).toList
        iprot.readListEnd
        _result0
        }
                          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = findAllBusinessTypes4Picker_result(success)
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: findAllBusinessTypes4Picker_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("findAllBusinessTypes4Picker_result"))

      
            {
            val elem0 = bean.success 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.LIST, 0.asInstanceOf[Short]))
            
        oprot.writeListBegin(new com.isuwang.org.apache.thrift.protocol.TList(com.isuwang.org.apache.thrift.protocol.TType.STRUCT, elem0.size))
        elem0.foreach(elem1 => { new com.isuwang.soa.scala.task.domain.serializer.TTaskPickerContainerSerializer().write(elem1, oprot)})
        oprot.writeListEnd
      
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: findAllBusinessTypes4Picker_result): Unit = {
      
              if(bean.success == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空")
            
    }
    

            override def toString(bean: findAllBusinessTypes4Picker_result): String = if(bean == null)  "null" else bean.toString
          }

            class findAllBusinessTypes4Picker extends SoaProcessFunction[com.isuwang.soa.scala.task.service.TaskBusinessTypeService, findAllBusinessTypes4Picker_args, findAllBusinessTypes4Picker_result, FindAllBusinessTypes4Picker_argsSerializer,  FindAllBusinessTypes4Picker_resultSerializer]("findAllBusinessTypes4Picker", new FindAllBusinessTypes4Picker_argsSerializer(), new FindAllBusinessTypes4Picker_resultSerializer()){

            override def isOneway: Boolean = false

            override def getEmptyArgsInstance: findAllBusinessTypes4Picker_args = null


            @throws[TException]
            def getResult(iface: com.isuwang.soa.scala.task.service.TaskBusinessTypeService, args: findAllBusinessTypes4Picker_args):findAllBusinessTypes4Picker_result = {

              val _result = iface.findAllBusinessTypes4Picker()
              findAllBusinessTypes4Picker_result(_result )
            }
          }
          

        case class getServiceMetadata_args()

        case class getServiceMetadata_result(success: String)

        class GetServiceMetadata_argsSerializer extends TCommonBeanSerializer[getServiceMetadata_args] {

          @throws[TException]
          override def read(iprot: TProtocol): getServiceMetadata_args = {

            iprot.readStructBegin

            var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null

            while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {
              schemeField = iprot.readFieldBegin
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
              iprot.readFieldEnd
            }

            iprot.readStructEnd

            val bean = getServiceMetadata_args()
            validate(bean)

            bean
          }

          @throws[TException]
          override def write(bean: getServiceMetadata_args, oproto: TProtocol): Unit = {
            validate(bean)
            oproto.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getServiceMetadata_args"))

            oproto.writeFieldStop
            oproto.writeStructEnd
          }

          @throws[TException]
          override def validate(bean: getServiceMetadata_args): Unit = {}

          override def toString(bean: getServiceMetadata_args): String = if (bean == null) "null" else bean.toString
        }



        class GetServiceMetadata_resultSerializer extends TCommonBeanSerializer[getServiceMetadata_result] {
          @throws[TException]
          override def read(iprot: TProtocol): getServiceMetadata_result = {
            iprot.readStructBegin

            var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null

            var success: String = null

            while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {
              schemeField = iprot.readFieldBegin

              schemeField.id match {
                case 0 =>
                schemeField.`type` match {
                  case com.isuwang.org.apache.thrift.protocol.TType.STRING => success = iprot.readString
                  case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }
                case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
              }
              iprot.readFieldEnd
            }

            iprot.readStructEnd
            val bean = getServiceMetadata_result(success)
            validate(bean)

            bean
          }

          @throws[TException]
          override def write(bean: getServiceMetadata_result, oproto: TProtocol): Unit = {
            validate(bean)
            oproto.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getServiceMetadata_result"))

            oproto.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRING, 0.asInstanceOf[Short]))
            oproto.writeString(bean.success)
            oproto.writeFieldEnd

            oproto.writeFieldStop
            oproto.writeStructEnd
          }

          @throws[TException]
          override def validate(bean: getServiceMetadata_result): Unit = {
            if (bean.success == null)
            throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空")
          }

          override def toString(bean: getServiceMetadata_result): String = if (bean == null) "null" else bean.toString

        }



  class getServiceMetadata extends SoaProcessFunction[com.isuwang.soa.scala.task.service.TaskBusinessTypeService, getServiceMetadata_args, getServiceMetadata_result, GetServiceMetadata_argsSerializer, GetServiceMetadata_resultSerializer](
  "getServiceMetadata", new GetServiceMetadata_argsSerializer(), new GetServiceMetadata_resultSerializer()) {

      override def isOneway: Boolean = false

      override def getEmptyArgsInstance: getServiceMetadata_args = getServiceMetadata_args()

      @throws[TException]
      override def getResult(iface: com.isuwang.soa.scala.task.service.TaskBusinessTypeService, args: getServiceMetadata_args): getServiceMetadata_result = {

        val source = scala.io.Source.fromInputStream(TaskBusinessTypeServiceCodec.getClass.getClassLoader.getResourceAsStream("com.isuwang.soa.scala.task.service.TaskBusinessTypeService.xml"))
        val success = source.mkString
        source.close
        getServiceMetadata_result(success)
      }
      }

      class Processor(iface: com.isuwang.soa.scala.task.service.TaskBusinessTypeService) extends SoaCommonBaseProcessor(iface, Processor.getProcessMap)

        object Processor{

          type PF = SoaProcessFunction[com.isuwang.soa.scala.task.service.TaskBusinessTypeService, _, _, _ <: TCommonBeanSerializer[_], _ <: TCommonBeanSerializer[_]]

          def getProcessMap(): java.util.Map[String, PF] = {
             val map = new java.util.HashMap[String, PF]()
            map.put("findBusinessTypes", new findBusinessTypes)
              map.put("createBusinessType", new createBusinessType)
              map.put("updateBusinessType", new updateBusinessType)
              map.put("deleteBusinessType", new deleteBusinessType)
              map.put("findAllBusinessTypes4Picker", new findAllBusinessTypes4Picker)
              
            map.put("getServiceMetadata", new getServiceMetadata)
            map
          }

        }
        }
      