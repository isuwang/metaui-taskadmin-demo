 package com.isuwang.soa.task.domain.serializer;
        import com.isuwang.soa.common.util.serializer.*;import com.isuwang.soa.task.domain.serializer.*;

        import com.isuwang.dapeng.core.*;
        import com.isuwang.org.apache.thrift.*;
        import com.isuwang.org.apache.thrift.protocol.*;

        import java.util.Optional;
        import java.util.concurrent.CompletableFuture;
        import java.util.concurrent.Future;

        /**
        * Autogenerated by Dapeng-Code-Generator (1.2.2)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *  @generated
        **/
        public class TTaskRequestSerializer implements TCommonBeanSerializer<com.isuwang.soa.task.domain.TTaskRequest>{
        
      @Override
      public com.isuwang.soa.task.domain.TTaskRequest read(TProtocol iprot) throws TException{

        com.isuwang.soa.task.domain.TTaskRequest bean = new com.isuwang.soa.task.domain.TTaskRequest();
        com.isuwang.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();

        while(true){
          schemeField = iprot.readFieldBegin();
          if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

          switch(schemeField.id){
          
              case 1:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                com.isuwang.soa.common.util.TPageRequest elem0 = new com.isuwang.soa.common.util.TPageRequest();
        elem0=new com.isuwang.soa.common.util.serializer.TPageRequestSerializer().read(iprot);
          bean.setPageRequest(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 2:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
                String elem0 = iprot.readString();
          bean.setTaskNo(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 3:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                 int elem0 = iprot.readI32();
          bean.setCompanyId(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 4:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                 int elem0 = iprot.readI32();
          bean.setType(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 5:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                 int elem0 = iprot.readI32();
          bean.setBusinessTypeId(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 6:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                 int elem0 = iprot.readI32();
          bean.setStatus(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 7:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                 int elem0 = iprot.readI32();
          bean.setHandlerId(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 8:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I64){
                long elem0 = iprot.readI64();
          bean.setPlanAtStart(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 9:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I64){
                long elem0 = iprot.readI64();
          bean.setPlanAtEnd(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 10:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I64){
                long elem0 = iprot.readI64();
          bean.setUpdateAtStart(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 11:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I64){
                long elem0 = iprot.readI64();
          bean.setUpdateAtEnd(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
            
                default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        validate(bean);
        return bean;
      }
    
      @Override
      public void write(com.isuwang.soa.task.domain.TTaskRequest bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("TTaskRequest"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("pageRequest", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.soa.common.util.TPageRequest elem0 = bean.getPageRequest();
             new com.isuwang.soa.common.util.serializer.TPageRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          if(bean.getTaskNo().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("taskNo", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 2));
              String elem1 = bean.getTaskNo().get();
              oprot.writeString(elem1);
              
            }
            if(bean.getCompanyId().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("companyId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 3));
              Integer elem2 = bean.getCompanyId().get();
              oprot.writeI32(elem2);
              
            }
            if(bean.getType().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("type", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 4));
              Integer elem3 = bean.getType().get();
              oprot.writeI32(elem3);
              
            }
            if(bean.getBusinessTypeId().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("businessTypeId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 5));
              Integer elem4 = bean.getBusinessTypeId().get();
              oprot.writeI32(elem4);
              
            }
            if(bean.getStatus().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("status", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 6));
              Integer elem5 = bean.getStatus().get();
              oprot.writeI32(elem5);
              
            }
            if(bean.getHandlerId().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("handlerId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 7));
              Integer elem6 = bean.getHandlerId().get();
              oprot.writeI32(elem6);
              
            }
            if(bean.getPlanAtStart().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("planAtStart", com.isuwang.org.apache.thrift.protocol.TType.I64, (short) 8));
              Long elem7 = bean.getPlanAtStart().get();
              oprot.writeI64(elem7);
              
            }
            if(bean.getPlanAtEnd().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("planAtEnd", com.isuwang.org.apache.thrift.protocol.TType.I64, (short) 9));
              Long elem8 = bean.getPlanAtEnd().get();
              oprot.writeI64(elem8);
              
            }
            if(bean.getUpdateAtStart().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("updateAtStart", com.isuwang.org.apache.thrift.protocol.TType.I64, (short) 10));
              Long elem9 = bean.getUpdateAtStart().get();
              oprot.writeI64(elem9);
              
            }
            if(bean.getUpdateAtEnd().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("updateAtEnd", com.isuwang.org.apache.thrift.protocol.TType.I64, (short) 11));
              Long elem10 = bean.getUpdateAtEnd().get();
              oprot.writeI64(elem10);
              
            }
            
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(com.isuwang.soa.task.domain.TTaskRequest bean) throws TException{
      
              if(bean.getPageRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "pageRequest字段不允许为空");
            
                if(bean.getPageRequest() != null)
                new com.isuwang.soa.common.util.serializer.TPageRequestSerializer().validate(bean.getPageRequest());
              
    }
    
        @Override
        public String toString(com.isuwang.soa.task.domain.TTaskRequest bean)
        {return bean == null ? "null" : bean.toString();}
      }
      

      