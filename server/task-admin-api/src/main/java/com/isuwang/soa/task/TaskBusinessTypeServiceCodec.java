package com.isuwang.soa.task;
        import com.isuwang.soa.common.util.serializer.*;import com.isuwang.soa.task.domain.serializer.*;

        import com.isuwang.dapeng.core.*;
        import com.isuwang.org.apache.thrift.*;
        import com.isuwang.org.apache.thrift.protocol.*;

        import java.io.BufferedReader;
        import java.io.InputStreamReader;

        import java.util.Optional;
        import java.util.concurrent.CompletableFuture;
        import java.util.concurrent.Future;

        /**
        * Autogenerated by Dapeng-Code-Generator (1.2.2)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *  @generated
        **/
        public class TaskBusinessTypeServiceCodec {

        
            public static class findBusinessTypes_args {
            
                private com.isuwang.soa.task.domain.TBusinessTypeRequest request;
                public com.isuwang.soa.task.domain.TBusinessTypeRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.soa.task.domain.TBusinessTypeRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }


            public static class findBusinessTypes_result {

            
                  private com.isuwang.soa.task.domain.TBusinessTypeResponse success;
                  public com.isuwang.soa.task.domain.TBusinessTypeResponse getSuccess(){
                  return success;
                }

                  public void setSuccess(com.isuwang.soa.task.domain.TBusinessTypeResponse success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class FindBusinessTypes_argsSerializer implements TCommonBeanSerializer<findBusinessTypes_args>{
            
      @Override
      public findBusinessTypes_args read(TProtocol iprot) throws TException{

        findBusinessTypes_args bean = new findBusinessTypes_args();
        com.isuwang.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();

        while(true){
          schemeField = iprot.readFieldBegin();
          if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

          switch(schemeField.id){
          
              case 1:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                com.isuwang.soa.task.domain.TBusinessTypeRequest elem0 = new com.isuwang.soa.task.domain.TBusinessTypeRequest();
        elem0=new com.isuwang.soa.task.domain.serializer.TBusinessTypeRequestSerializer().read(iprot);
          bean.setRequest(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
            
                default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        validate(bean);
        return bean;
      }
    
      @Override
      public void write(findBusinessTypes_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("findBusinessTypes_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.soa.task.domain.TBusinessTypeRequest elem0 = bean.getRequest();
             new com.isuwang.soa.task.domain.serializer.TBusinessTypeRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(findBusinessTypes_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.soa.task.domain.serializer.TBusinessTypeRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(findBusinessTypes_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class FindBusinessTypes_resultSerializer implements TCommonBeanSerializer<findBusinessTypes_result>{
            @Override
            public findBusinessTypes_result read(TProtocol iprot) throws TException{

              findBusinessTypes_result bean = new findBusinessTypes_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                    com.isuwang.soa.task.domain.TBusinessTypeResponse elem0 = new com.isuwang.soa.task.domain.TBusinessTypeResponse();
        elem0=new com.isuwang.soa.task.domain.serializer.TBusinessTypeResponseSerializer().read(iprot);
          bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(findBusinessTypes_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("findBusinessTypes_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.isuwang.soa.task.domain.TBusinessTypeResponse elem0 = bean.getSuccess();
             new com.isuwang.soa.task.domain.serializer.TBusinessTypeResponseSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(findBusinessTypes_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.isuwang.soa.task.domain.serializer.TBusinessTypeResponseSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(findBusinessTypes_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class findBusinessTypes<I extends com.isuwang.soa.task.service.TaskBusinessTypeService> extends SoaProcessFunction<I, findBusinessTypes_args, findBusinessTypes_result, FindBusinessTypes_argsSerializer,  FindBusinessTypes_resultSerializer>{
            public findBusinessTypes(){
              super("findBusinessTypes", new FindBusinessTypes_argsSerializer(),  new FindBusinessTypes_resultSerializer());
            }
            
              @Override
              public findBusinessTypes_result getResult(I iface, findBusinessTypes_args args) throws TException{
                findBusinessTypes_result result = new findBusinessTypes_result();
                
                      result.success = iface.findBusinessTypes(args.request);
                    
                return result;
              }
            

            @Override
            public findBusinessTypes_args getEmptyArgsInstance(){
              return new findBusinessTypes_args();
            }

            @Override
            protected boolean isOneway(){
              return false;
            }
          }
          
            public static class createBusinessType_args {
            
                private com.isuwang.soa.task.domain.TSaveBusinessType request;
                public com.isuwang.soa.task.domain.TSaveBusinessType getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.soa.task.domain.TSaveBusinessType request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }


            public static class createBusinessType_result {

            
                  @Override
                  public String toString(){
                  return "{}";
                }
                
          }

            public static class CreateBusinessType_argsSerializer implements TCommonBeanSerializer<createBusinessType_args>{
            
      @Override
      public createBusinessType_args read(TProtocol iprot) throws TException{

        createBusinessType_args bean = new createBusinessType_args();
        com.isuwang.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();

        while(true){
          schemeField = iprot.readFieldBegin();
          if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

          switch(schemeField.id){
          
              case 1:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                com.isuwang.soa.task.domain.TSaveBusinessType elem0 = new com.isuwang.soa.task.domain.TSaveBusinessType();
        elem0=new com.isuwang.soa.task.domain.serializer.TSaveBusinessTypeSerializer().read(iprot);
          bean.setRequest(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
            
                default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        validate(bean);
        return bean;
      }
    
      @Override
      public void write(createBusinessType_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("createBusinessType_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.soa.task.domain.TSaveBusinessType elem0 = bean.getRequest();
             new com.isuwang.soa.task.domain.serializer.TSaveBusinessTypeSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(createBusinessType_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.soa.task.domain.serializer.TSaveBusinessTypeSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(createBusinessType_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class CreateBusinessType_resultSerializer implements TCommonBeanSerializer<createBusinessType_result>{
            @Override
            public createBusinessType_result read(TProtocol iprot) throws TException{

              createBusinessType_result bean = new createBusinessType_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.VOID){
                    
         com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(createBusinessType_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("createBusinessType_result"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(createBusinessType_result bean) throws TException{
      
    }
    

            @Override
            public String toString(createBusinessType_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class createBusinessType<I extends com.isuwang.soa.task.service.TaskBusinessTypeService> extends SoaProcessFunction<I, createBusinessType_args, createBusinessType_result, CreateBusinessType_argsSerializer,  CreateBusinessType_resultSerializer>{
            public createBusinessType(){
              super("createBusinessType", new CreateBusinessType_argsSerializer(),  new CreateBusinessType_resultSerializer());
            }
            
              @Override
              public createBusinessType_result getResult(I iface, createBusinessType_args args) throws TException{
                createBusinessType_result result = new createBusinessType_result();
                
                      iface.createBusinessType(args.request);
                    
                return result;
              }
            

            @Override
            public createBusinessType_args getEmptyArgsInstance(){
              return new createBusinessType_args();
            }

            @Override
            protected boolean isOneway(){
              return false;
            }
          }
          
            public static class updateBusinessType_args {
            
                private com.isuwang.soa.task.domain.TSaveBusinessType request;
                public com.isuwang.soa.task.domain.TSaveBusinessType getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.soa.task.domain.TSaveBusinessType request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }


            public static class updateBusinessType_result {

            
                  @Override
                  public String toString(){
                  return "{}";
                }
                
          }

            public static class UpdateBusinessType_argsSerializer implements TCommonBeanSerializer<updateBusinessType_args>{
            
      @Override
      public updateBusinessType_args read(TProtocol iprot) throws TException{

        updateBusinessType_args bean = new updateBusinessType_args();
        com.isuwang.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();

        while(true){
          schemeField = iprot.readFieldBegin();
          if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

          switch(schemeField.id){
          
              case 1:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                com.isuwang.soa.task.domain.TSaveBusinessType elem0 = new com.isuwang.soa.task.domain.TSaveBusinessType();
        elem0=new com.isuwang.soa.task.domain.serializer.TSaveBusinessTypeSerializer().read(iprot);
          bean.setRequest(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
            
                default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        validate(bean);
        return bean;
      }
    
      @Override
      public void write(updateBusinessType_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("updateBusinessType_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.soa.task.domain.TSaveBusinessType elem0 = bean.getRequest();
             new com.isuwang.soa.task.domain.serializer.TSaveBusinessTypeSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(updateBusinessType_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.soa.task.domain.serializer.TSaveBusinessTypeSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(updateBusinessType_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class UpdateBusinessType_resultSerializer implements TCommonBeanSerializer<updateBusinessType_result>{
            @Override
            public updateBusinessType_result read(TProtocol iprot) throws TException{

              updateBusinessType_result bean = new updateBusinessType_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.VOID){
                    
         com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(updateBusinessType_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("updateBusinessType_result"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(updateBusinessType_result bean) throws TException{
      
    }
    

            @Override
            public String toString(updateBusinessType_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class updateBusinessType<I extends com.isuwang.soa.task.service.TaskBusinessTypeService> extends SoaProcessFunction<I, updateBusinessType_args, updateBusinessType_result, UpdateBusinessType_argsSerializer,  UpdateBusinessType_resultSerializer>{
            public updateBusinessType(){
              super("updateBusinessType", new UpdateBusinessType_argsSerializer(),  new UpdateBusinessType_resultSerializer());
            }
            
              @Override
              public updateBusinessType_result getResult(I iface, updateBusinessType_args args) throws TException{
                updateBusinessType_result result = new updateBusinessType_result();
                
                      iface.updateBusinessType(args.request);
                    
                return result;
              }
            

            @Override
            public updateBusinessType_args getEmptyArgsInstance(){
              return new updateBusinessType_args();
            }

            @Override
            protected boolean isOneway(){
              return false;
            }
          }
          
            public static class deleteBusinessType_args {
            
                private Integer id;
                public Integer getId(){
                return this.id;
              }
                public void setId(Integer id){
                this.id = id;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("id").append("\":").append(id).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }


            public static class deleteBusinessType_result {

            
                  @Override
                  public String toString(){
                  return "{}";
                }
                
          }

            public static class DeleteBusinessType_argsSerializer implements TCommonBeanSerializer<deleteBusinessType_args>{
            
      @Override
      public deleteBusinessType_args read(TProtocol iprot) throws TException{

        deleteBusinessType_args bean = new deleteBusinessType_args();
        com.isuwang.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();

        while(true){
          schemeField = iprot.readFieldBegin();
          if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

          switch(schemeField.id){
          
              case 1:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                 int elem0 = iprot.readI32();
          bean.setId(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
            
                default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        validate(bean);
        return bean;
      }
    
      @Override
      public void write(deleteBusinessType_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("deleteBusinessType_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("id", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 1));
            Integer elem0 = bean.getId();
            oprot.writeI32(elem0);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(deleteBusinessType_args bean) throws TException{
      
    }
    

            @Override
            public String toString(deleteBusinessType_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class DeleteBusinessType_resultSerializer implements TCommonBeanSerializer<deleteBusinessType_result>{
            @Override
            public deleteBusinessType_result read(TProtocol iprot) throws TException{

              deleteBusinessType_result bean = new deleteBusinessType_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.VOID){
                    
         com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(deleteBusinessType_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("deleteBusinessType_result"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(deleteBusinessType_result bean) throws TException{
      
    }
    

            @Override
            public String toString(deleteBusinessType_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class deleteBusinessType<I extends com.isuwang.soa.task.service.TaskBusinessTypeService> extends SoaProcessFunction<I, deleteBusinessType_args, deleteBusinessType_result, DeleteBusinessType_argsSerializer,  DeleteBusinessType_resultSerializer>{
            public deleteBusinessType(){
              super("deleteBusinessType", new DeleteBusinessType_argsSerializer(),  new DeleteBusinessType_resultSerializer());
            }
            
              @Override
              public deleteBusinessType_result getResult(I iface, deleteBusinessType_args args) throws TException{
                deleteBusinessType_result result = new deleteBusinessType_result();
                
                      iface.deleteBusinessType(args.id);
                    
                return result;
              }
            

            @Override
            public deleteBusinessType_args getEmptyArgsInstance(){
              return new deleteBusinessType_args();
            }

            @Override
            protected boolean isOneway(){
              return false;
            }
          }
          
            public static class findAllBusinessTypes4Picker_args {
            

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }


            public static class findAllBusinessTypes4Picker_result {

            
                  private java.util.List<com.isuwang.soa.task.domain.TTaskPickerContainer> success;
                  public java.util.List<com.isuwang.soa.task.domain.TTaskPickerContainer> getSuccess(){
                  return success;
                }

                  public void setSuccess(java.util.List<com.isuwang.soa.task.domain.TTaskPickerContainer> success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(success).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class FindAllBusinessTypes4Picker_argsSerializer implements TCommonBeanSerializer<findAllBusinessTypes4Picker_args>{
            
      @Override
      public findAllBusinessTypes4Picker_args read(TProtocol iprot) throws TException{

        findAllBusinessTypes4Picker_args bean = new findAllBusinessTypes4Picker_args();
        com.isuwang.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();

        while(true){
          schemeField = iprot.readFieldBegin();
          if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

          switch(schemeField.id){
          
            
                default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        validate(bean);
        return bean;
      }
    
      @Override
      public void write(findAllBusinessTypes4Picker_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("findAllBusinessTypes4Picker_args"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(findAllBusinessTypes4Picker_args bean) throws TException{
      
    }
    

            @Override
            public String toString(findAllBusinessTypes4Picker_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class FindAllBusinessTypes4Picker_resultSerializer implements TCommonBeanSerializer<findAllBusinessTypes4Picker_result>{
            @Override
            public findAllBusinessTypes4Picker_result read(TProtocol iprot) throws TException{

              findAllBusinessTypes4Picker_result bean = new findAllBusinessTypes4Picker_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.LIST){
                     com.isuwang.org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
        java.util.List<com.isuwang.soa.task.domain.TTaskPickerContainer> elem0 = new java.util.ArrayList<>(_list0.size);
        for(int _i0 = 0; _i0 < _list0.size; ++ _i0){
          com.isuwang.soa.task.domain.TTaskPickerContainer elem1 = new com.isuwang.soa.task.domain.TTaskPickerContainer();
        elem1=new com.isuwang.soa.task.domain.serializer.TTaskPickerContainerSerializer().read(iprot);
          elem0.add(elem1);
        }
        iprot.readListEnd();
          bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(findAllBusinessTypes4Picker_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("findAllBusinessTypes4Picker_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.LIST, (short) 0));
            java.util.List<com.isuwang.soa.task.domain.TTaskPickerContainer> elem0 = bean.getSuccess();
            
          oprot.writeListBegin(new com.isuwang.org.apache.thrift.protocol.TList(com.isuwang.org.apache.thrift.protocol.TType.STRUCT, elem0.size()));
          for(com.isuwang.soa.task.domain.TTaskPickerContainer elem1 : elem0){
           new com.isuwang.soa.task.domain.serializer.TTaskPickerContainerSerializer().write(elem1, oprot);
        }
          oprot.writeListEnd();
        
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(findAllBusinessTypes4Picker_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
    }
    

            @Override
            public String toString(findAllBusinessTypes4Picker_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class findAllBusinessTypes4Picker<I extends com.isuwang.soa.task.service.TaskBusinessTypeService> extends SoaProcessFunction<I, findAllBusinessTypes4Picker_args, findAllBusinessTypes4Picker_result, FindAllBusinessTypes4Picker_argsSerializer,  FindAllBusinessTypes4Picker_resultSerializer>{
            public findAllBusinessTypes4Picker(){
              super("findAllBusinessTypes4Picker", new FindAllBusinessTypes4Picker_argsSerializer(),  new FindAllBusinessTypes4Picker_resultSerializer());
            }
            
              @Override
              public findAllBusinessTypes4Picker_result getResult(I iface, findAllBusinessTypes4Picker_args args) throws TException{
                findAllBusinessTypes4Picker_result result = new findAllBusinessTypes4Picker_result();
                
                      result.success = iface.findAllBusinessTypes4Picker();
                    
                return result;
              }
            

            @Override
            public findAllBusinessTypes4Picker_args getEmptyArgsInstance(){
              return new findAllBusinessTypes4Picker_args();
            }

            @Override
            protected boolean isOneway(){
              return false;
            }
          }
          

        public static class getServiceMetadata_args {

          @Override
          public String toString() {
            return "{}";
          }
        }


        public static class getServiceMetadata_result {

          private String success;

          public String getSuccess() {
            return success;
          }

          public void setSuccess(String success) {
            this.success = success;
          }

          @Override
          public String toString() {
            StringBuilder stringBuilder = new StringBuilder("{");
              stringBuilder.append("\"").append("success").append("\":\"").append(this.success).append("\",");
              stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
              stringBuilder.append("}");

            return stringBuilder.toString();
          }
        }

        public static class GetServiceMetadata_argsSerializer implements TCommonBeanSerializer<getServiceMetadata_args> {

          @Override
          public getServiceMetadata_args read(TProtocol iprot) throws TException {

            getServiceMetadata_args bean =new getServiceMetadata_args();
            com.isuwang.org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();

            while (true) {
              schemeField = iprot.readFieldBegin();
              if (schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP) {
                break;
              }
              switch (schemeField.id) {
                default:
                com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);

              }
              iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            validate(bean);
            return bean;
          }


          @Override
          public void write(getServiceMetadata_args bean, TProtocol oprot) throws TException {

            validate(bean);
            oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getServiceMetadata_args"));
            oprot.writeFieldStop();
            oprot.writeStructEnd();
          }

          public void validate(getServiceMetadata_args bean) throws TException {}

          @Override
          public String toString(getServiceMetadata_args bean) {
            return bean == null ? "null" : bean.toString();
          }

        }

        public static class GetServiceMetadata_resultSerializer implements TCommonBeanSerializer<getServiceMetadata_result> {
          @Override
          public getServiceMetadata_result read(TProtocol iprot) throws TException {

            getServiceMetadata_result bean = new getServiceMetadata_result();
            com.isuwang.org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();

            while (true) {
              schemeField = iprot.readFieldBegin();
              if (schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP) {
                break;
              }

              switch (schemeField.id) {
                case 0:  //SUCCESS
                if (schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING) {
                  bean.setSuccess(iprot.readString());
                } else {
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
                default:
                com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            validate(bean);
            return bean;
          }

          @Override
          public void write(getServiceMetadata_result bean, TProtocol oprot) throws TException {

            validate(bean);
            oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getServiceMetadata_result"));

            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 0));
            oprot.writeString(bean.getSuccess());
            oprot.writeFieldEnd();

            oprot.writeFieldStop();
            oprot.writeStructEnd();
          }

          public void validate(getServiceMetadata_result bean) throws TException {

            if (bean.getSuccess() == null)
            throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
          }

          @Override
          public String toString(getServiceMetadata_result bean) {
            return bean == null ? "null" : bean.toString();
          }
        }

        public static class getServiceMetadata<I extends com.isuwang.soa.task.service.TaskBusinessTypeService> extends SoaProcessFunction<I, getServiceMetadata_args, getServiceMetadata_result, GetServiceMetadata_argsSerializer, GetServiceMetadata_resultSerializer> {
          public getServiceMetadata() {
            super("getServiceMetadata", new GetServiceMetadata_argsSerializer(), new GetServiceMetadata_resultSerializer());
          }

          @Override
          public getServiceMetadata_result getResult(I iface, getServiceMetadata_args args) throws TException {
            getServiceMetadata_result result = new getServiceMetadata_result();

            try (InputStreamReader isr = new InputStreamReader(TaskBusinessTypeServiceCodec.class.getClassLoader().getResourceAsStream("com.isuwang.soa.task.service.TaskBusinessTypeService.xml"));
            BufferedReader in = new BufferedReader(isr)) {
              int len = 0;
              StringBuilder str = new StringBuilder("");
              String line;
              while ((line = in.readLine()) != null) {

                if (len != 0) {
                  str.append("\r\n").append(line);
                } else {
                  str.append(line);
                }
                len++;
              }
              result.success = str.toString();

            } catch (Exception e) {
              e.printStackTrace();
              result.success = "";
            }

            return result;
          }

          @Override
          public getServiceMetadata_args getEmptyArgsInstance() {
            return new getServiceMetadata_args();
          }

          @Override
          protected boolean isOneway() {
            return false;
          }
        }

        @SuppressWarnings("unchecked")
        public static class Processor<I extends com.isuwang.soa.task.service.TaskBusinessTypeService> extends SoaCommonBaseProcessor{
          public Processor(I iface){
            super(iface, getProcessMap(new java.util.HashMap<>()));
          }

          @SuppressWarnings("unchecked")
          private static <I extends com.isuwang.soa.task.service.TaskBusinessTypeService> java.util.Map<String, SoaProcessFunction<I, ?, ?, ? extends TCommonBeanSerializer<?>, ? extends TCommonBeanSerializer<?>>> getProcessMap(java.util.Map<String, SoaProcessFunction<I, ?, ?, ? extends TCommonBeanSerializer<?>, ? extends TCommonBeanSerializer<?>>> processMap){
            
                processMap.put("findBusinessTypes", new findBusinessTypes());
              
                processMap.put("createBusinessType", new createBusinessType());
              
                processMap.put("updateBusinessType", new updateBusinessType());
              
                processMap.put("deleteBusinessType", new deleteBusinessType());
              
                processMap.put("findAllBusinessTypes4Picker", new findAllBusinessTypes4Picker());
              
            processMap.put("getServiceMetadata", new getServiceMetadata());

            return processMap;
          }
        }

        }
      