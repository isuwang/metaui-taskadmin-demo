package com.isuwang.soa.task;
        import com.isuwang.soa.common.util.serializer.*;import com.isuwang.soa.task.domain.serializer.*;

        import com.isuwang.dapeng.core.*;
        import com.isuwang.org.apache.thrift.*;
        import com.isuwang.org.apache.thrift.protocol.*;

        import java.io.BufferedReader;
        import java.io.InputStreamReader;

        import java.util.Optional;
        import java.util.concurrent.CompletableFuture;
        import java.util.concurrent.Future;

        /**
        * Autogenerated by Dapeng-Code-Generator (1.2.2)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *  @generated
        **/
        public class TaskSuggestionServiceCodec {

        
            public static class findSuggestions_args {
            
                private com.isuwang.soa.task.domain.TSuggestionRequest request;
                public com.isuwang.soa.task.domain.TSuggestionRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.soa.task.domain.TSuggestionRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }


            public static class findSuggestions_result {

            
                  private com.isuwang.soa.task.domain.TSuggestionResponse success;
                  public com.isuwang.soa.task.domain.TSuggestionResponse getSuccess(){
                  return success;
                }

                  public void setSuccess(com.isuwang.soa.task.domain.TSuggestionResponse success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class FindSuggestions_argsSerializer implements TCommonBeanSerializer<findSuggestions_args>{
            
      @Override
      public findSuggestions_args read(TProtocol iprot) throws TException{

        findSuggestions_args bean = new findSuggestions_args();
        com.isuwang.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();

        while(true){
          schemeField = iprot.readFieldBegin();
          if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

          switch(schemeField.id){
          
              case 1:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                com.isuwang.soa.task.domain.TSuggestionRequest elem0 = new com.isuwang.soa.task.domain.TSuggestionRequest();
        elem0=new com.isuwang.soa.task.domain.serializer.TSuggestionRequestSerializer().read(iprot);
          bean.setRequest(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
            
                default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        validate(bean);
        return bean;
      }
    
      @Override
      public void write(findSuggestions_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("findSuggestions_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.soa.task.domain.TSuggestionRequest elem0 = bean.getRequest();
             new com.isuwang.soa.task.domain.serializer.TSuggestionRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(findSuggestions_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.soa.task.domain.serializer.TSuggestionRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(findSuggestions_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class FindSuggestions_resultSerializer implements TCommonBeanSerializer<findSuggestions_result>{
            @Override
            public findSuggestions_result read(TProtocol iprot) throws TException{

              findSuggestions_result bean = new findSuggestions_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                    com.isuwang.soa.task.domain.TSuggestionResponse elem0 = new com.isuwang.soa.task.domain.TSuggestionResponse();
        elem0=new com.isuwang.soa.task.domain.serializer.TSuggestionResponseSerializer().read(iprot);
          bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(findSuggestions_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("findSuggestions_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.isuwang.soa.task.domain.TSuggestionResponse elem0 = bean.getSuccess();
             new com.isuwang.soa.task.domain.serializer.TSuggestionResponseSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(findSuggestions_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.isuwang.soa.task.domain.serializer.TSuggestionResponseSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(findSuggestions_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class findSuggestions<I extends com.isuwang.soa.task.service.TaskSuggestionService> extends SoaProcessFunction<I, findSuggestions_args, findSuggestions_result, FindSuggestions_argsSerializer,  FindSuggestions_resultSerializer>{
            public findSuggestions(){
              super("findSuggestions", new FindSuggestions_argsSerializer(),  new FindSuggestions_resultSerializer());
            }
            
              @Override
              public findSuggestions_result getResult(I iface, findSuggestions_args args) throws TException{
                findSuggestions_result result = new findSuggestions_result();
                
                      result.success = iface.findSuggestions(args.request);
                    
                return result;
              }
            

            @Override
            public findSuggestions_args getEmptyArgsInstance(){
              return new findSuggestions_args();
            }

            @Override
            protected boolean isOneway(){
              return false;
            }
          }
          
            public static class createSuggestion_args {
            
                private com.isuwang.soa.task.domain.TSaveSuggestion request;
                public com.isuwang.soa.task.domain.TSaveSuggestion getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.soa.task.domain.TSaveSuggestion request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }


            public static class createSuggestion_result {

            
                  @Override
                  public String toString(){
                  return "{}";
                }
                
          }

            public static class CreateSuggestion_argsSerializer implements TCommonBeanSerializer<createSuggestion_args>{
            
      @Override
      public createSuggestion_args read(TProtocol iprot) throws TException{

        createSuggestion_args bean = new createSuggestion_args();
        com.isuwang.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();

        while(true){
          schemeField = iprot.readFieldBegin();
          if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

          switch(schemeField.id){
          
              case 1:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                com.isuwang.soa.task.domain.TSaveSuggestion elem0 = new com.isuwang.soa.task.domain.TSaveSuggestion();
        elem0=new com.isuwang.soa.task.domain.serializer.TSaveSuggestionSerializer().read(iprot);
          bean.setRequest(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
            
                default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        validate(bean);
        return bean;
      }
    
      @Override
      public void write(createSuggestion_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("createSuggestion_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.soa.task.domain.TSaveSuggestion elem0 = bean.getRequest();
             new com.isuwang.soa.task.domain.serializer.TSaveSuggestionSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(createSuggestion_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.soa.task.domain.serializer.TSaveSuggestionSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(createSuggestion_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class CreateSuggestion_resultSerializer implements TCommonBeanSerializer<createSuggestion_result>{
            @Override
            public createSuggestion_result read(TProtocol iprot) throws TException{

              createSuggestion_result bean = new createSuggestion_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.VOID){
                    
         com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(createSuggestion_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("createSuggestion_result"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(createSuggestion_result bean) throws TException{
      
    }
    

            @Override
            public String toString(createSuggestion_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class createSuggestion<I extends com.isuwang.soa.task.service.TaskSuggestionService> extends SoaProcessFunction<I, createSuggestion_args, createSuggestion_result, CreateSuggestion_argsSerializer,  CreateSuggestion_resultSerializer>{
            public createSuggestion(){
              super("createSuggestion", new CreateSuggestion_argsSerializer(),  new CreateSuggestion_resultSerializer());
            }
            
              @Override
              public createSuggestion_result getResult(I iface, createSuggestion_args args) throws TException{
                createSuggestion_result result = new createSuggestion_result();
                
                      iface.createSuggestion(args.request);
                    
                return result;
              }
            

            @Override
            public createSuggestion_args getEmptyArgsInstance(){
              return new createSuggestion_args();
            }

            @Override
            protected boolean isOneway(){
              return false;
            }
          }
          
            public static class updateSuggestion_args {
            
                private com.isuwang.soa.task.domain.TSaveSuggestion request;
                public com.isuwang.soa.task.domain.TSaveSuggestion getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.soa.task.domain.TSaveSuggestion request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }


            public static class updateSuggestion_result {

            
                  @Override
                  public String toString(){
                  return "{}";
                }
                
          }

            public static class UpdateSuggestion_argsSerializer implements TCommonBeanSerializer<updateSuggestion_args>{
            
      @Override
      public updateSuggestion_args read(TProtocol iprot) throws TException{

        updateSuggestion_args bean = new updateSuggestion_args();
        com.isuwang.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();

        while(true){
          schemeField = iprot.readFieldBegin();
          if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

          switch(schemeField.id){
          
              case 1:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                com.isuwang.soa.task.domain.TSaveSuggestion elem0 = new com.isuwang.soa.task.domain.TSaveSuggestion();
        elem0=new com.isuwang.soa.task.domain.serializer.TSaveSuggestionSerializer().read(iprot);
          bean.setRequest(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
            
                default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        validate(bean);
        return bean;
      }
    
      @Override
      public void write(updateSuggestion_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("updateSuggestion_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.soa.task.domain.TSaveSuggestion elem0 = bean.getRequest();
             new com.isuwang.soa.task.domain.serializer.TSaveSuggestionSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(updateSuggestion_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.soa.task.domain.serializer.TSaveSuggestionSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(updateSuggestion_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class UpdateSuggestion_resultSerializer implements TCommonBeanSerializer<updateSuggestion_result>{
            @Override
            public updateSuggestion_result read(TProtocol iprot) throws TException{

              updateSuggestion_result bean = new updateSuggestion_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.VOID){
                    
         com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(updateSuggestion_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("updateSuggestion_result"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(updateSuggestion_result bean) throws TException{
      
    }
    

            @Override
            public String toString(updateSuggestion_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class updateSuggestion<I extends com.isuwang.soa.task.service.TaskSuggestionService> extends SoaProcessFunction<I, updateSuggestion_args, updateSuggestion_result, UpdateSuggestion_argsSerializer,  UpdateSuggestion_resultSerializer>{
            public updateSuggestion(){
              super("updateSuggestion", new UpdateSuggestion_argsSerializer(),  new UpdateSuggestion_resultSerializer());
            }
            
              @Override
              public updateSuggestion_result getResult(I iface, updateSuggestion_args args) throws TException{
                updateSuggestion_result result = new updateSuggestion_result();
                
                      iface.updateSuggestion(args.request);
                    
                return result;
              }
            

            @Override
            public updateSuggestion_args getEmptyArgsInstance(){
              return new updateSuggestion_args();
            }

            @Override
            protected boolean isOneway(){
              return false;
            }
          }
          
            public static class deleteSuggestion_args {
            
                private Integer id;
                public Integer getId(){
                return this.id;
              }
                public void setId(Integer id){
                this.id = id;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("id").append("\":").append(id).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }


            public static class deleteSuggestion_result {

            
                  @Override
                  public String toString(){
                  return "{}";
                }
                
          }

            public static class DeleteSuggestion_argsSerializer implements TCommonBeanSerializer<deleteSuggestion_args>{
            
      @Override
      public deleteSuggestion_args read(TProtocol iprot) throws TException{

        deleteSuggestion_args bean = new deleteSuggestion_args();
        com.isuwang.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();

        while(true){
          schemeField = iprot.readFieldBegin();
          if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

          switch(schemeField.id){
          
              case 1:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                 int elem0 = iprot.readI32();
          bean.setId(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
            
                default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        validate(bean);
        return bean;
      }
    
      @Override
      public void write(deleteSuggestion_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("deleteSuggestion_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("id", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 1));
            Integer elem0 = bean.getId();
            oprot.writeI32(elem0);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(deleteSuggestion_args bean) throws TException{
      
    }
    

            @Override
            public String toString(deleteSuggestion_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class DeleteSuggestion_resultSerializer implements TCommonBeanSerializer<deleteSuggestion_result>{
            @Override
            public deleteSuggestion_result read(TProtocol iprot) throws TException{

              deleteSuggestion_result bean = new deleteSuggestion_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.VOID){
                    
         com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(deleteSuggestion_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("deleteSuggestion_result"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(deleteSuggestion_result bean) throws TException{
      
    }
    

            @Override
            public String toString(deleteSuggestion_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class deleteSuggestion<I extends com.isuwang.soa.task.service.TaskSuggestionService> extends SoaProcessFunction<I, deleteSuggestion_args, deleteSuggestion_result, DeleteSuggestion_argsSerializer,  DeleteSuggestion_resultSerializer>{
            public deleteSuggestion(){
              super("deleteSuggestion", new DeleteSuggestion_argsSerializer(),  new DeleteSuggestion_resultSerializer());
            }
            
              @Override
              public deleteSuggestion_result getResult(I iface, deleteSuggestion_args args) throws TException{
                deleteSuggestion_result result = new deleteSuggestion_result();
                
                      iface.deleteSuggestion(args.id);
                    
                return result;
              }
            

            @Override
            public deleteSuggestion_args getEmptyArgsInstance(){
              return new deleteSuggestion_args();
            }

            @Override
            protected boolean isOneway(){
              return false;
            }
          }
          
            public static class findAllSuggestions4PickerByType_args {
            
                private Integer type;
                public Integer getType(){
                return this.type;
              }
                public void setType(Integer type){
                this.type = type;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("type").append("\":").append(type).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }


            public static class findAllSuggestions4PickerByType_result {

            
                  private java.util.List<com.isuwang.soa.task.domain.TSuggestion4Picker> success;
                  public java.util.List<com.isuwang.soa.task.domain.TSuggestion4Picker> getSuccess(){
                  return success;
                }

                  public void setSuccess(java.util.List<com.isuwang.soa.task.domain.TSuggestion4Picker> success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(success).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class FindAllSuggestions4PickerByType_argsSerializer implements TCommonBeanSerializer<findAllSuggestions4PickerByType_args>{
            
      @Override
      public findAllSuggestions4PickerByType_args read(TProtocol iprot) throws TException{

        findAllSuggestions4PickerByType_args bean = new findAllSuggestions4PickerByType_args();
        com.isuwang.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();

        while(true){
          schemeField = iprot.readFieldBegin();
          if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

          switch(schemeField.id){
          
              case 1:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                 int elem0 = iprot.readI32();
          bean.setType(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
            
                default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        validate(bean);
        return bean;
      }
    
      @Override
      public void write(findAllSuggestions4PickerByType_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("findAllSuggestions4PickerByType_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("type", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 1));
            Integer elem0 = bean.getType();
            oprot.writeI32(elem0);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(findAllSuggestions4PickerByType_args bean) throws TException{
      
    }
    

            @Override
            public String toString(findAllSuggestions4PickerByType_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class FindAllSuggestions4PickerByType_resultSerializer implements TCommonBeanSerializer<findAllSuggestions4PickerByType_result>{
            @Override
            public findAllSuggestions4PickerByType_result read(TProtocol iprot) throws TException{

              findAllSuggestions4PickerByType_result bean = new findAllSuggestions4PickerByType_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.LIST){
                     com.isuwang.org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
        java.util.List<com.isuwang.soa.task.domain.TSuggestion4Picker> elem0 = new java.util.ArrayList<>(_list0.size);
        for(int _i0 = 0; _i0 < _list0.size; ++ _i0){
          com.isuwang.soa.task.domain.TSuggestion4Picker elem1 = new com.isuwang.soa.task.domain.TSuggestion4Picker();
        elem1=new com.isuwang.soa.task.domain.serializer.TSuggestion4PickerSerializer().read(iprot);
          elem0.add(elem1);
        }
        iprot.readListEnd();
          bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(findAllSuggestions4PickerByType_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("findAllSuggestions4PickerByType_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.LIST, (short) 0));
            java.util.List<com.isuwang.soa.task.domain.TSuggestion4Picker> elem0 = bean.getSuccess();
            
          oprot.writeListBegin(new com.isuwang.org.apache.thrift.protocol.TList(com.isuwang.org.apache.thrift.protocol.TType.STRUCT, elem0.size()));
          for(com.isuwang.soa.task.domain.TSuggestion4Picker elem1 : elem0){
           new com.isuwang.soa.task.domain.serializer.TSuggestion4PickerSerializer().write(elem1, oprot);
        }
          oprot.writeListEnd();
        
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(findAllSuggestions4PickerByType_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
    }
    

            @Override
            public String toString(findAllSuggestions4PickerByType_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class findAllSuggestions4PickerByType<I extends com.isuwang.soa.task.service.TaskSuggestionService> extends SoaProcessFunction<I, findAllSuggestions4PickerByType_args, findAllSuggestions4PickerByType_result, FindAllSuggestions4PickerByType_argsSerializer,  FindAllSuggestions4PickerByType_resultSerializer>{
            public findAllSuggestions4PickerByType(){
              super("findAllSuggestions4PickerByType", new FindAllSuggestions4PickerByType_argsSerializer(),  new FindAllSuggestions4PickerByType_resultSerializer());
            }
            
              @Override
              public findAllSuggestions4PickerByType_result getResult(I iface, findAllSuggestions4PickerByType_args args) throws TException{
                findAllSuggestions4PickerByType_result result = new findAllSuggestions4PickerByType_result();
                
                      result.success = iface.findAllSuggestions4PickerByType(args.type);
                    
                return result;
              }
            

            @Override
            public findAllSuggestions4PickerByType_args getEmptyArgsInstance(){
              return new findAllSuggestions4PickerByType_args();
            }

            @Override
            protected boolean isOneway(){
              return false;
            }
          }
          

        public static class getServiceMetadata_args {

          @Override
          public String toString() {
            return "{}";
          }
        }


        public static class getServiceMetadata_result {

          private String success;

          public String getSuccess() {
            return success;
          }

          public void setSuccess(String success) {
            this.success = success;
          }

          @Override
          public String toString() {
            StringBuilder stringBuilder = new StringBuilder("{");
              stringBuilder.append("\"").append("success").append("\":\"").append(this.success).append("\",");
              stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
              stringBuilder.append("}");

            return stringBuilder.toString();
          }
        }

        public static class GetServiceMetadata_argsSerializer implements TCommonBeanSerializer<getServiceMetadata_args> {

          @Override
          public getServiceMetadata_args read(TProtocol iprot) throws TException {

            getServiceMetadata_args bean =new getServiceMetadata_args();
            com.isuwang.org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();

            while (true) {
              schemeField = iprot.readFieldBegin();
              if (schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP) {
                break;
              }
              switch (schemeField.id) {
                default:
                com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);

              }
              iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            validate(bean);
            return bean;
          }


          @Override
          public void write(getServiceMetadata_args bean, TProtocol oprot) throws TException {

            validate(bean);
            oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getServiceMetadata_args"));
            oprot.writeFieldStop();
            oprot.writeStructEnd();
          }

          public void validate(getServiceMetadata_args bean) throws TException {}

          @Override
          public String toString(getServiceMetadata_args bean) {
            return bean == null ? "null" : bean.toString();
          }

        }

        public static class GetServiceMetadata_resultSerializer implements TCommonBeanSerializer<getServiceMetadata_result> {
          @Override
          public getServiceMetadata_result read(TProtocol iprot) throws TException {

            getServiceMetadata_result bean = new getServiceMetadata_result();
            com.isuwang.org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();

            while (true) {
              schemeField = iprot.readFieldBegin();
              if (schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP) {
                break;
              }

              switch (schemeField.id) {
                case 0:  //SUCCESS
                if (schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING) {
                  bean.setSuccess(iprot.readString());
                } else {
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
                default:
                com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            validate(bean);
            return bean;
          }

          @Override
          public void write(getServiceMetadata_result bean, TProtocol oprot) throws TException {

            validate(bean);
            oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getServiceMetadata_result"));

            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 0));
            oprot.writeString(bean.getSuccess());
            oprot.writeFieldEnd();

            oprot.writeFieldStop();
            oprot.writeStructEnd();
          }

          public void validate(getServiceMetadata_result bean) throws TException {

            if (bean.getSuccess() == null)
            throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
          }

          @Override
          public String toString(getServiceMetadata_result bean) {
            return bean == null ? "null" : bean.toString();
          }
        }

        public static class getServiceMetadata<I extends com.isuwang.soa.task.service.TaskSuggestionService> extends SoaProcessFunction<I, getServiceMetadata_args, getServiceMetadata_result, GetServiceMetadata_argsSerializer, GetServiceMetadata_resultSerializer> {
          public getServiceMetadata() {
            super("getServiceMetadata", new GetServiceMetadata_argsSerializer(), new GetServiceMetadata_resultSerializer());
          }

          @Override
          public getServiceMetadata_result getResult(I iface, getServiceMetadata_args args) throws TException {
            getServiceMetadata_result result = new getServiceMetadata_result();

            try (InputStreamReader isr = new InputStreamReader(TaskSuggestionServiceCodec.class.getClassLoader().getResourceAsStream("com.isuwang.soa.task.service.TaskSuggestionService.xml"));
            BufferedReader in = new BufferedReader(isr)) {
              int len = 0;
              StringBuilder str = new StringBuilder("");
              String line;
              while ((line = in.readLine()) != null) {

                if (len != 0) {
                  str.append("\r\n").append(line);
                } else {
                  str.append(line);
                }
                len++;
              }
              result.success = str.toString();

            } catch (Exception e) {
              e.printStackTrace();
              result.success = "";
            }

            return result;
          }

          @Override
          public getServiceMetadata_args getEmptyArgsInstance() {
            return new getServiceMetadata_args();
          }

          @Override
          protected boolean isOneway() {
            return false;
          }
        }

        @SuppressWarnings("unchecked")
        public static class Processor<I extends com.isuwang.soa.task.service.TaskSuggestionService> extends SoaCommonBaseProcessor{
          public Processor(I iface){
            super(iface, getProcessMap(new java.util.HashMap<>()));
          }

          @SuppressWarnings("unchecked")
          private static <I extends com.isuwang.soa.task.service.TaskSuggestionService> java.util.Map<String, SoaProcessFunction<I, ?, ?, ? extends TCommonBeanSerializer<?>, ? extends TCommonBeanSerializer<?>>> getProcessMap(java.util.Map<String, SoaProcessFunction<I, ?, ?, ? extends TCommonBeanSerializer<?>, ? extends TCommonBeanSerializer<?>>> processMap){
            
                processMap.put("findSuggestions", new findSuggestions());
              
                processMap.put("createSuggestion", new createSuggestion());
              
                processMap.put("updateSuggestion", new updateSuggestion());
              
                processMap.put("deleteSuggestion", new deleteSuggestion());
              
                processMap.put("findAllSuggestions4PickerByType", new findAllSuggestions4PickerByType());
              
            processMap.put("getServiceMetadata", new getServiceMetadata());

            return processMap;
          }
        }

        }
      