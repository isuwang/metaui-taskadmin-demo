 package com.isuwang.soa.task.domain.serializer;
        import com.isuwang.soa.common.util.serializer.*;import com.isuwang.soa.task.domain.serializer.*;

        import com.isuwang.dapeng.core.*;
        import com.isuwang.org.apache.thrift.*;
        import com.isuwang.org.apache.thrift.protocol.*;

        import java.util.Optional;
        import java.util.concurrent.CompletableFuture;
        import java.util.concurrent.Future;

        /**
        * Autogenerated by Dapeng-Code-Generator (1.2.2)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *  @generated
        **/
        public class TUpdateTaskRequestSerializer implements TCommonBeanSerializer<com.isuwang.soa.task.domain.TUpdateTaskRequest>{
        
      @Override
      public com.isuwang.soa.task.domain.TUpdateTaskRequest read(TProtocol iprot) throws TException{

        com.isuwang.soa.task.domain.TUpdateTaskRequest bean = new com.isuwang.soa.task.domain.TUpdateTaskRequest();
        com.isuwang.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();

        while(true){
          schemeField = iprot.readFieldBegin();
          if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

          switch(schemeField.id){
          
              case 1:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                 int elem0 = iprot.readI32();
          bean.setTaskId(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 3:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                 int elem0 = iprot.readI32();
          bean.setType(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 4:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                 int elem0 = iprot.readI32();
          bean.setStatus(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 5:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                 int elem0 = iprot.readI32();
          bean.setBusinessTypeId(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 6:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                 int elem0 = iprot.readI32();
          bean.setPriority(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 7:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
                String elem0 = iprot.readString();
          bean.setTaskSubject(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 8:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                 int elem0 = iprot.readI32();
          bean.setCompanyId(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 9:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                 int elem0 = iprot.readI32();
          bean.setCommunicationStyle(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 10:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I64){
                long elem0 = iprot.readI64();
          bean.setPlanAt(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 11:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                 int elem0 = iprot.readI32();
          bean.setHandlerId(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 12:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
                String elem0 = iprot.readString();
          bean.setProblemDesc(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 13:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
                String elem0 = iprot.readString();
          bean.setResultDesc(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 19:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.LIST){
                 com.isuwang.org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
        java.util.List<com.isuwang.soa.task.domain.TTaskItemRequest> elem0 = new java.util.ArrayList<>(_list0.size);
        for(int _i0 = 0; _i0 < _list0.size; ++ _i0){
          com.isuwang.soa.task.domain.TTaskItemRequest elem1 = new com.isuwang.soa.task.domain.TTaskItemRequest();
        elem1=new com.isuwang.soa.task.domain.serializer.TTaskItemRequestSerializer().read(iprot);
          elem0.add(elem1);
        }
        iprot.readListEnd();
          bean.setQuestions(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 20:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.LIST){
                 com.isuwang.org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
        java.util.List<com.isuwang.soa.task.domain.TTaskItemRequest> elem0 = new java.util.ArrayList<>(_list0.size);
        for(int _i0 = 0; _i0 < _list0.size; ++ _i0){
          com.isuwang.soa.task.domain.TTaskItemRequest elem1 = new com.isuwang.soa.task.domain.TTaskItemRequest();
        elem1=new com.isuwang.soa.task.domain.serializer.TTaskItemRequestSerializer().read(iprot);
          elem0.add(elem1);
        }
        iprot.readListEnd();
          bean.setImprovements(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
            
                default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        validate(bean);
        return bean;
      }
    
      @Override
      public void write(com.isuwang.soa.task.domain.TUpdateTaskRequest bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("TUpdateTaskRequest"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("taskId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 1));
            Integer elem0 = bean.getTaskId();
            oprot.writeI32(elem0);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("type", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 3));
            Integer elem1 = bean.getType();
            oprot.writeI32(elem1);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("status", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 4));
            Integer elem2 = bean.getStatus();
            oprot.writeI32(elem2);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("businessTypeId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 5));
            Integer elem3 = bean.getBusinessTypeId();
            oprot.writeI32(elem3);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("priority", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 6));
            Integer elem4 = bean.getPriority();
            oprot.writeI32(elem4);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("taskSubject", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 7));
            String elem5 = bean.getTaskSubject();
            oprot.writeString(elem5);
            
            oprot.writeFieldEnd();
          if(bean.getCompanyId().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("companyId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 8));
              Integer elem6 = bean.getCompanyId().get();
              oprot.writeI32(elem6);
              
            }
            if(bean.getCommunicationStyle().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("communicationStyle", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 9));
              Integer elem7 = bean.getCommunicationStyle().get();
              oprot.writeI32(elem7);
              
            }
            if(bean.getPlanAt().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("planAt", com.isuwang.org.apache.thrift.protocol.TType.I64, (short) 10));
              Long elem8 = bean.getPlanAt().get();
              oprot.writeI64(elem8);
              
            }
            if(bean.getHandlerId().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("handlerId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 11));
              Integer elem9 = bean.getHandlerId().get();
              oprot.writeI32(elem9);
              
            }
            if(bean.getProblemDesc().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("problemDesc", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 12));
              String elem10 = bean.getProblemDesc().get();
              oprot.writeString(elem10);
              
            }
            if(bean.getResultDesc().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("resultDesc", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 13));
              String elem11 = bean.getResultDesc().get();
              oprot.writeString(elem11);
              
            }
            if(bean.getQuestions().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("questions", com.isuwang.org.apache.thrift.protocol.TType.LIST, (short) 19));
              java.util.List<com.isuwang.soa.task.domain.TTaskItemRequest> elem12 = bean.getQuestions().get();
              
          oprot.writeListBegin(new com.isuwang.org.apache.thrift.protocol.TList(com.isuwang.org.apache.thrift.protocol.TType.STRUCT, elem12.size()));
          for(com.isuwang.soa.task.domain.TTaskItemRequest elem13 : elem12){
           new com.isuwang.soa.task.domain.serializer.TTaskItemRequestSerializer().write(elem13, oprot);
        }
          oprot.writeListEnd();
        
              
            }
            if(bean.getImprovements().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("improvements", com.isuwang.org.apache.thrift.protocol.TType.LIST, (short) 20));
              java.util.List<com.isuwang.soa.task.domain.TTaskItemRequest> elem13 = bean.getImprovements().get();
              
          oprot.writeListBegin(new com.isuwang.org.apache.thrift.protocol.TList(com.isuwang.org.apache.thrift.protocol.TType.STRUCT, elem13.size()));
          for(com.isuwang.soa.task.domain.TTaskItemRequest elem14 : elem13){
           new com.isuwang.soa.task.domain.serializer.TTaskItemRequestSerializer().write(elem14, oprot);
        }
          oprot.writeListEnd();
        
              
            }
            
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(com.isuwang.soa.task.domain.TUpdateTaskRequest bean) throws TException{
      
              if(bean.getTaskSubject() == null)
              throw new SoaException(SoaBaseCode.NotNull, "taskSubject字段不允许为空");
            
    }
    
        @Override
        public String toString(com.isuwang.soa.task.domain.TUpdateTaskRequest bean)
        {return bean == null ? "null" : bean.toString();}
      }
      

      