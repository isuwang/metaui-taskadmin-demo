package com.isuwang.soa.task;

      import com.isuwang.dapeng.core.*;
      import com.isuwang.org.apache.thrift.*;
      import com.isuwang.dapeng.remoting.BaseCommonServiceClient;
      import java.util.concurrent.CompletableFuture;
      import java.util.concurrent.Future;
      import com.isuwang.soa.task.TaskAdminServiceCodec.*;

      /**
       * Autogenerated by Dapeng-Code-Generator (1.2.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated

      **/
      public class TaskAdminServiceClient extends BaseCommonServiceClient{

      public TaskAdminServiceClient() {
        super("com.isuwang.soa.task.service.TaskAdminService", "1.0.0");
      }

      @Override
      protected boolean isSoaTransactionalProcess(){
        return false;
      }

      
       /**
       * 
       **/
          
              public com.isuwang.soa.task.domain.TTaskResponse findTasks(com.isuwang.soa.task.domain.TTaskRequest request) throws SoaException{
                initContext("findTasks");

          try {
             findTasks_args findTasks_args = new findTasks_args();
          findTasks_args.setRequest(request);
            

          findTasks_result response = sendBase(findTasks_args, new FindTasks_argsSerializer(), new FindTasks_resultSerializer());

             
                  
                        return response.getSuccess();
                      
                
          }catch (SoaException e){
              throw e;
          } catch (TException e){
              throw new SoaException(e);
          }finally {
            destoryContext();
          }
          }
            
        
       /**
       * 
       **/
          
              public com.isuwang.soa.task.domain.TTaskDetail findTaskDetailById(Integer id) throws SoaException{
                initContext("findTaskDetailById");

          try {
             findTaskDetailById_args findTaskDetailById_args = new findTaskDetailById_args();
          findTaskDetailById_args.setId(id);
            

          findTaskDetailById_result response = sendBase(findTaskDetailById_args, new FindTaskDetailById_argsSerializer(), new FindTaskDetailById_resultSerializer());

             
                  
                        return response.getSuccess();
                      
                
          }catch (SoaException e){
              throw e;
          } catch (TException e){
              throw new SoaException(e);
          }finally {
            destoryContext();
          }
          }
            
        
       /**
       * 
       **/
          
              public void createTask(com.isuwang.soa.task.domain.TCreateTaskRequest request) throws SoaException{
                initContext("createTask");

          try {
             createTask_args createTask_args = new createTask_args();
          createTask_args.setRequest(request);
            

          createTask_result response = sendBase(createTask_args, new CreateTask_argsSerializer(), new CreateTask_resultSerializer());

             
                  
                
          }catch (SoaException e){
              throw e;
          } catch (TException e){
              throw new SoaException(e);
          }finally {
            destoryContext();
          }
          }
            
        
       /**
       * 
       **/
          
              public void updateTask(com.isuwang.soa.task.domain.TUpdateTaskRequest request) throws SoaException{
                initContext("updateTask");

          try {
             updateTask_args updateTask_args = new updateTask_args();
          updateTask_args.setRequest(request);
            

          updateTask_result response = sendBase(updateTask_args, new UpdateTask_argsSerializer(), new UpdateTask_resultSerializer());

             
                  
                
          }catch (SoaException e){
              throw e;
          } catch (TException e){
              throw new SoaException(e);
          }finally {
            destoryContext();
          }
          }
            
        
       /**
       * 
       **/
          
              public void unbindSubTask(Integer subTaskId) throws SoaException{
                initContext("unbindSubTask");

          try {
             unbindSubTask_args unbindSubTask_args = new unbindSubTask_args();
          unbindSubTask_args.setSubTaskId(subTaskId);
            

          unbindSubTask_result response = sendBase(unbindSubTask_args, new UnbindSubTask_argsSerializer(), new UnbindSubTask_resultSerializer());

             
                  
                
          }catch (SoaException e){
              throw e;
          } catch (TException e){
              throw new SoaException(e);
          }finally {
            destoryContext();
          }
          }
            
        
       /**
       * 
       **/
          
              public void createTaskRemark(com.isuwang.soa.task.domain.TSaveTaskRemark request) throws SoaException{
                initContext("createTaskRemark");

          try {
             createTaskRemark_args createTaskRemark_args = new createTaskRemark_args();
          createTaskRemark_args.setRequest(request);
            

          createTaskRemark_result response = sendBase(createTaskRemark_args, new CreateTaskRemark_argsSerializer(), new CreateTaskRemark_resultSerializer());

             
                  
                
          }catch (SoaException e){
              throw e;
          } catch (TException e){
              throw new SoaException(e);
          }finally {
            destoryContext();
          }
          }
            
        
       /**
       * 
       **/
          
              public void updateTaskRemark(com.isuwang.soa.task.domain.TSaveTaskRemark request) throws SoaException{
                initContext("updateTaskRemark");

          try {
             updateTaskRemark_args updateTaskRemark_args = new updateTaskRemark_args();
          updateTaskRemark_args.setRequest(request);
            

          updateTaskRemark_result response = sendBase(updateTaskRemark_args, new UpdateTaskRemark_argsSerializer(), new UpdateTaskRemark_resultSerializer());

             
                  
                
          }catch (SoaException e){
              throw e;
          } catch (TException e){
              throw new SoaException(e);
          }finally {
            destoryContext();
          }
          }
            
        
       /**
       * 
       **/
          
              public void deleteTaskRemark(Integer id) throws SoaException{
                initContext("deleteTaskRemark");

          try {
             deleteTaskRemark_args deleteTaskRemark_args = new deleteTaskRemark_args();
          deleteTaskRemark_args.setId(id);
            

          deleteTaskRemark_result response = sendBase(deleteTaskRemark_args, new DeleteTaskRemark_argsSerializer(), new DeleteTaskRemark_resultSerializer());

             
                  
                
          }catch (SoaException e){
              throw e;
          } catch (TException e){
              throw new SoaException(e);
          }finally {
            destoryContext();
          }
          }
            
        
       /**
       * 
       **/
          
              public void createTaskLog(com.isuwang.soa.task.domain.TCreateTaskLog request) throws SoaException{
                initContext("createTaskLog");

          try {
             createTaskLog_args createTaskLog_args = new createTaskLog_args();
          createTaskLog_args.setRequest(request);
            

          createTaskLog_result response = sendBase(createTaskLog_args, new CreateTaskLog_argsSerializer(), new CreateTaskLog_resultSerializer());

             
                  
                
          }catch (SoaException e){
              throw e;
          } catch (TException e){
              throw new SoaException(e);
          }finally {
            destoryContext();
          }
          }
            
        
       /**
       * 
       **/
          
              public Integer createTaskAttachment(com.isuwang.soa.task.domain.TCreateTaskAttachment request) throws SoaException{
                initContext("createTaskAttachment");

          try {
             createTaskAttachment_args createTaskAttachment_args = new createTaskAttachment_args();
          createTaskAttachment_args.setRequest(request);
            

          createTaskAttachment_result response = sendBase(createTaskAttachment_args, new CreateTaskAttachment_argsSerializer(), new CreateTaskAttachment_resultSerializer());

             
                  
                        return response.getSuccess();
                      
                
          }catch (SoaException e){
              throw e;
          } catch (TException e){
              throw new SoaException(e);
          }finally {
            destoryContext();
          }
          }
            
        
       /**
       * 
       **/
          
              public void deleteTaskAttachment(Integer id) throws SoaException{
                initContext("deleteTaskAttachment");

          try {
             deleteTaskAttachment_args deleteTaskAttachment_args = new deleteTaskAttachment_args();
          deleteTaskAttachment_args.setId(id);
            

          deleteTaskAttachment_result response = sendBase(deleteTaskAttachment_args, new DeleteTaskAttachment_argsSerializer(), new DeleteTaskAttachment_resultSerializer());

             
                  
                
          }catch (SoaException e){
              throw e;
          } catch (TException e){
              throw new SoaException(e);
          }finally {
            destoryContext();
          }
          }
            
        
       /**
       * 
       **/
          
              public java.util.List<com.isuwang.soa.task.domain.TTaskPickerContainer> findAllTaskNos4Picker() throws SoaException{
                initContext("findAllTaskNos4Picker");

          try {
             findAllTaskNos4Picker_args findAllTaskNos4Picker_args = new findAllTaskNos4Picker_args();
          

          findAllTaskNos4Picker_result response = sendBase(findAllTaskNos4Picker_args, new FindAllTaskNos4Picker_argsSerializer(), new FindAllTaskNos4Picker_resultSerializer());

             
                  
                        return response.getSuccess();
                      
                
          }catch (SoaException e){
              throw e;
          } catch (TException e){
              throw new SoaException(e);
          }finally {
            destoryContext();
          }
          }
            
        

      /**
      * getServiceMetadata
      **/
      public String getServiceMetadata() throws SoaException {
        initContext("getServiceMetadata");
        try {
          getServiceMetadata_args getServiceMetadata_args = new getServiceMetadata_args();
          getServiceMetadata_result response = sendBase(getServiceMetadata_args, new GetServiceMetadata_argsSerializer(), new GetServiceMetadata_resultSerializer());
          return response.getSuccess();
        }catch (SoaException e){
          throw e;
        } catch (TException e){
          throw new SoaException(e);
        } finally {
          destoryContext();
        }
      }

      }
    