 package com.isuwang.soa.task.domain.serializer;
        import com.isuwang.soa.common.util.serializer.*;import com.isuwang.soa.task.domain.serializer.*;

        import com.isuwang.dapeng.core.*;
        import com.isuwang.org.apache.thrift.*;
        import com.isuwang.org.apache.thrift.protocol.*;

        import java.util.Optional;
        import java.util.concurrent.CompletableFuture;
        import java.util.concurrent.Future;

        /**
        * Autogenerated by Dapeng-Code-Generator (1.2.2)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *  @generated
        **/
        public class TTaskDetailSerializer implements TCommonBeanSerializer<com.isuwang.soa.task.domain.TTaskDetail>{
        
      @Override
      public com.isuwang.soa.task.domain.TTaskDetail read(TProtocol iprot) throws TException{

        com.isuwang.soa.task.domain.TTaskDetail bean = new com.isuwang.soa.task.domain.TTaskDetail();
        com.isuwang.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();

        while(true){
          schemeField = iprot.readFieldBegin();
          if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

          switch(schemeField.id){
          
              case 1:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                 int elem0 = iprot.readI32();
          bean.setId(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 2:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                 int elem0 = iprot.readI32();
          bean.setParentTaskId(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 3:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
                String elem0 = iprot.readString();
          bean.setTaskNo(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 4:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                 int elem0 = iprot.readI32();
          bean.setCompanyId(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 5:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
                String elem0 = iprot.readString();
          bean.setCompanyName(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 25:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
                String elem0 = iprot.readString();
          bean.setTaskSubject(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 6:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                 int elem0 = iprot.readI32();
          bean.setStatus(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 7:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                 int elem0 = iprot.readI32();
          bean.setType(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 8:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                 int elem0 = iprot.readI32();
          bean.setBusinessTypeId(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 9:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                 int elem0 = iprot.readI32();
          bean.setPriority(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 10:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I64){
                long elem0 = iprot.readI64();
          bean.setPlanAt(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 11:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                 int elem0 = iprot.readI32();
          bean.setCommunicationStyle(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 12:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                 int elem0 = iprot.readI32();
          bean.setHandlerId(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 13:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
                String elem0 = iprot.readString();
          bean.setProblemDesc(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 14:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
                String elem0 = iprot.readString();
          bean.setResultDesc(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 15:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I64){
                long elem0 = iprot.readI64();
          bean.setCreatedAt(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 16:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                 int elem0 = iprot.readI32();
          bean.setCreatedBy(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 17:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I64){
                long elem0 = iprot.readI64();
          bean.setUpdatedAt(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 18:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                 int elem0 = iprot.readI32();
          bean.setUpdatedBy(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 19:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.LIST){
                 com.isuwang.org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
        java.util.List<com.isuwang.soa.task.domain.TTaskItem> elem0 = new java.util.ArrayList<>(_list0.size);
        for(int _i0 = 0; _i0 < _list0.size; ++ _i0){
          com.isuwang.soa.task.domain.TTaskItem elem1 = new com.isuwang.soa.task.domain.TTaskItem();
        elem1=new com.isuwang.soa.task.domain.serializer.TTaskItemSerializer().read(iprot);
          elem0.add(elem1);
        }
        iprot.readListEnd();
          bean.setQuestions(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 20:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.LIST){
                 com.isuwang.org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
        java.util.List<com.isuwang.soa.task.domain.TTaskItem> elem0 = new java.util.ArrayList<>(_list0.size);
        for(int _i0 = 0; _i0 < _list0.size; ++ _i0){
          com.isuwang.soa.task.domain.TTaskItem elem1 = new com.isuwang.soa.task.domain.TTaskItem();
        elem1=new com.isuwang.soa.task.domain.serializer.TTaskItemSerializer().read(iprot);
          elem0.add(elem1);
        }
        iprot.readListEnd();
          bean.setImprovements(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 21:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.LIST){
                 com.isuwang.org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
        java.util.List<com.isuwang.soa.task.domain.TTaskLog> elem0 = new java.util.ArrayList<>(_list0.size);
        for(int _i0 = 0; _i0 < _list0.size; ++ _i0){
          com.isuwang.soa.task.domain.TTaskLog elem1 = new com.isuwang.soa.task.domain.TTaskLog();
        elem1=new com.isuwang.soa.task.domain.serializer.TTaskLogSerializer().read(iprot);
          elem0.add(elem1);
        }
        iprot.readListEnd();
          bean.setTaskLogs(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 22:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.LIST){
                 com.isuwang.org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
        java.util.List<com.isuwang.soa.task.domain.TTaskAttachment> elem0 = new java.util.ArrayList<>(_list0.size);
        for(int _i0 = 0; _i0 < _list0.size; ++ _i0){
          com.isuwang.soa.task.domain.TTaskAttachment elem1 = new com.isuwang.soa.task.domain.TTaskAttachment();
        elem1=new com.isuwang.soa.task.domain.serializer.TTaskAttachmentSerializer().read(iprot);
          elem0.add(elem1);
        }
        iprot.readListEnd();
          bean.setTaskAttachments(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 23:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.LIST){
                 com.isuwang.org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
        java.util.List<com.isuwang.soa.task.domain.TTaskRemark> elem0 = new java.util.ArrayList<>(_list0.size);
        for(int _i0 = 0; _i0 < _list0.size; ++ _i0){
          com.isuwang.soa.task.domain.TTaskRemark elem1 = new com.isuwang.soa.task.domain.TTaskRemark();
        elem1=new com.isuwang.soa.task.domain.serializer.TTaskRemarkSerializer().read(iprot);
          elem0.add(elem1);
        }
        iprot.readListEnd();
          bean.setTaskRemarks(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 24:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.LIST){
                 com.isuwang.org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
        java.util.List<com.isuwang.soa.task.domain.TTask> elem0 = new java.util.ArrayList<>(_list0.size);
        for(int _i0 = 0; _i0 < _list0.size; ++ _i0){
          com.isuwang.soa.task.domain.TTask elem1 = new com.isuwang.soa.task.domain.TTask();
        elem1=new com.isuwang.soa.task.domain.serializer.TTaskSerializer().read(iprot);
          elem0.add(elem1);
        }
        iprot.readListEnd();
          bean.setChildren(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 26:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
                String elem0 = iprot.readString();
          bean.setHandlerName(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 27:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                com.isuwang.soa.task.domain.TTask elem0 = new com.isuwang.soa.task.domain.TTask();
        elem0=new com.isuwang.soa.task.domain.serializer.TTaskSerializer().read(iprot);
          bean.setParentTask(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
            
                default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        validate(bean);
        return bean;
      }
    
      @Override
      public void write(com.isuwang.soa.task.domain.TTaskDetail bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("TTaskDetail"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("id", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 1));
            Integer elem0 = bean.getId();
            oprot.writeI32(elem0);
            
            oprot.writeFieldEnd();
          if(bean.getParentTaskId().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("parentTaskId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 2));
              Integer elem1 = bean.getParentTaskId().get();
              oprot.writeI32(elem1);
              
            }
            
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("taskNo", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 3));
            String elem2 = bean.getTaskNo();
            oprot.writeString(elem2);
            
            oprot.writeFieldEnd();
          if(bean.getCompanyId().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("companyId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 4));
              Integer elem3 = bean.getCompanyId().get();
              oprot.writeI32(elem3);
              
            }
            if(bean.getCompanyName().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("companyName", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 5));
              String elem4 = bean.getCompanyName().get();
              oprot.writeString(elem4);
              
            }
            
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("taskSubject", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 25));
            String elem5 = bean.getTaskSubject();
            oprot.writeString(elem5);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("status", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 6));
            Integer elem6 = bean.getStatus();
            oprot.writeI32(elem6);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("type", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 7));
            Integer elem7 = bean.getType();
            oprot.writeI32(elem7);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("businessTypeId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 8));
            Integer elem8 = bean.getBusinessTypeId();
            oprot.writeI32(elem8);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("priority", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 9));
            Integer elem9 = bean.getPriority();
            oprot.writeI32(elem9);
            
            oprot.writeFieldEnd();
          if(bean.getPlanAt().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("planAt", com.isuwang.org.apache.thrift.protocol.TType.I64, (short) 10));
              Long elem10 = bean.getPlanAt().get();
              oprot.writeI64(elem10);
              
            }
            if(bean.getCommunicationStyle().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("communicationStyle", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 11));
              Integer elem11 = bean.getCommunicationStyle().get();
              oprot.writeI32(elem11);
              
            }
            if(bean.getHandlerId().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("handlerId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 12));
              Integer elem12 = bean.getHandlerId().get();
              oprot.writeI32(elem12);
              
            }
            if(bean.getProblemDesc().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("problemDesc", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 13));
              String elem13 = bean.getProblemDesc().get();
              oprot.writeString(elem13);
              
            }
            if(bean.getResultDesc().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("resultDesc", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 14));
              String elem14 = bean.getResultDesc().get();
              oprot.writeString(elem14);
              
            }
            
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("createdAt", com.isuwang.org.apache.thrift.protocol.TType.I64, (short) 15));
            Long elem15 = bean.getCreatedAt();
            oprot.writeI64(elem15);
            
            oprot.writeFieldEnd();
          if(bean.getCreatedBy().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("createdBy", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 16));
              Integer elem16 = bean.getCreatedBy().get();
              oprot.writeI32(elem16);
              
            }
            
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("updatedAt", com.isuwang.org.apache.thrift.protocol.TType.I64, (short) 17));
            Long elem17 = bean.getUpdatedAt();
            oprot.writeI64(elem17);
            
            oprot.writeFieldEnd();
          if(bean.getUpdatedBy().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("updatedBy", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 18));
              Integer elem18 = bean.getUpdatedBy().get();
              oprot.writeI32(elem18);
              
            }
            
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("questions", com.isuwang.org.apache.thrift.protocol.TType.LIST, (short) 19));
            java.util.List<com.isuwang.soa.task.domain.TTaskItem> elem19 = bean.getQuestions();
            
          oprot.writeListBegin(new com.isuwang.org.apache.thrift.protocol.TList(com.isuwang.org.apache.thrift.protocol.TType.STRUCT, elem19.size()));
          for(com.isuwang.soa.task.domain.TTaskItem elem20 : elem19){
           new com.isuwang.soa.task.domain.serializer.TTaskItemSerializer().write(elem20, oprot);
        }
          oprot.writeListEnd();
        
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("improvements", com.isuwang.org.apache.thrift.protocol.TType.LIST, (short) 20));
            java.util.List<com.isuwang.soa.task.domain.TTaskItem> elem20 = bean.getImprovements();
            
          oprot.writeListBegin(new com.isuwang.org.apache.thrift.protocol.TList(com.isuwang.org.apache.thrift.protocol.TType.STRUCT, elem20.size()));
          for(com.isuwang.soa.task.domain.TTaskItem elem21 : elem20){
           new com.isuwang.soa.task.domain.serializer.TTaskItemSerializer().write(elem21, oprot);
        }
          oprot.writeListEnd();
        
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("taskLogs", com.isuwang.org.apache.thrift.protocol.TType.LIST, (short) 21));
            java.util.List<com.isuwang.soa.task.domain.TTaskLog> elem21 = bean.getTaskLogs();
            
          oprot.writeListBegin(new com.isuwang.org.apache.thrift.protocol.TList(com.isuwang.org.apache.thrift.protocol.TType.STRUCT, elem21.size()));
          for(com.isuwang.soa.task.domain.TTaskLog elem22 : elem21){
           new com.isuwang.soa.task.domain.serializer.TTaskLogSerializer().write(elem22, oprot);
        }
          oprot.writeListEnd();
        
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("taskAttachments", com.isuwang.org.apache.thrift.protocol.TType.LIST, (short) 22));
            java.util.List<com.isuwang.soa.task.domain.TTaskAttachment> elem22 = bean.getTaskAttachments();
            
          oprot.writeListBegin(new com.isuwang.org.apache.thrift.protocol.TList(com.isuwang.org.apache.thrift.protocol.TType.STRUCT, elem22.size()));
          for(com.isuwang.soa.task.domain.TTaskAttachment elem23 : elem22){
           new com.isuwang.soa.task.domain.serializer.TTaskAttachmentSerializer().write(elem23, oprot);
        }
          oprot.writeListEnd();
        
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("taskRemarks", com.isuwang.org.apache.thrift.protocol.TType.LIST, (short) 23));
            java.util.List<com.isuwang.soa.task.domain.TTaskRemark> elem23 = bean.getTaskRemarks();
            
          oprot.writeListBegin(new com.isuwang.org.apache.thrift.protocol.TList(com.isuwang.org.apache.thrift.protocol.TType.STRUCT, elem23.size()));
          for(com.isuwang.soa.task.domain.TTaskRemark elem24 : elem23){
           new com.isuwang.soa.task.domain.serializer.TTaskRemarkSerializer().write(elem24, oprot);
        }
          oprot.writeListEnd();
        
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("children", com.isuwang.org.apache.thrift.protocol.TType.LIST, (short) 24));
            java.util.List<com.isuwang.soa.task.domain.TTask> elem24 = bean.getChildren();
            
          oprot.writeListBegin(new com.isuwang.org.apache.thrift.protocol.TList(com.isuwang.org.apache.thrift.protocol.TType.STRUCT, elem24.size()));
          for(com.isuwang.soa.task.domain.TTask elem25 : elem24){
           new com.isuwang.soa.task.domain.serializer.TTaskSerializer().write(elem25, oprot);
        }
          oprot.writeListEnd();
        
            
            oprot.writeFieldEnd();
          if(bean.getHandlerName().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("handlerName", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 26));
              String elem25 = bean.getHandlerName().get();
              oprot.writeString(elem25);
              
            }
            if(bean.getParentTask().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("parentTask", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 27));
              com.isuwang.soa.task.domain.TTask elem26 = bean.getParentTask().get();
               new com.isuwang.soa.task.domain.serializer.TTaskSerializer().write(elem26, oprot);
              
            }
            
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(com.isuwang.soa.task.domain.TTaskDetail bean) throws TException{
      
              if(bean.getTaskNo() == null)
              throw new SoaException(SoaBaseCode.NotNull, "taskNo字段不允许为空");
            
              if(bean.getTaskSubject() == null)
              throw new SoaException(SoaBaseCode.NotNull, "taskSubject字段不允许为空");
            
              if(bean.getQuestions() == null)
              throw new SoaException(SoaBaseCode.NotNull, "questions字段不允许为空");
            
              if(bean.getImprovements() == null)
              throw new SoaException(SoaBaseCode.NotNull, "improvements字段不允许为空");
            
              if(bean.getTaskLogs() == null)
              throw new SoaException(SoaBaseCode.NotNull, "taskLogs字段不允许为空");
            
              if(bean.getTaskAttachments() == null)
              throw new SoaException(SoaBaseCode.NotNull, "taskAttachments字段不允许为空");
            
              if(bean.getTaskRemarks() == null)
              throw new SoaException(SoaBaseCode.NotNull, "taskRemarks字段不允许为空");
            
              if(bean.getChildren() == null)
              throw new SoaException(SoaBaseCode.NotNull, "children字段不允许为空");
            
                if(bean.getParentTask().isPresent())
                new com.isuwang.soa.task.domain.serializer.TTaskSerializer().validate(bean.getParentTask().get());
              
    }
    
        @Override
        public String toString(com.isuwang.soa.task.domain.TTaskDetail bean)
        {return bean == null ? "null" : bean.toString();}
      }
      

      