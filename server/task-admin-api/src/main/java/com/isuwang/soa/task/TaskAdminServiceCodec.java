package com.isuwang.soa.task;
        import com.isuwang.soa.common.util.serializer.*;import com.isuwang.soa.task.domain.serializer.*;

        import com.isuwang.dapeng.core.*;
        import com.isuwang.org.apache.thrift.*;
        import com.isuwang.org.apache.thrift.protocol.*;

        import java.io.BufferedReader;
        import java.io.InputStreamReader;

        import java.util.Optional;
        import java.util.concurrent.CompletableFuture;
        import java.util.concurrent.Future;

        /**
        * Autogenerated by Dapeng-Code-Generator (1.2.2)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *  @generated
        **/
        public class TaskAdminServiceCodec {

        
            public static class findTasks_args {
            
                private com.isuwang.soa.task.domain.TTaskRequest request;
                public com.isuwang.soa.task.domain.TTaskRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.soa.task.domain.TTaskRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }


            public static class findTasks_result {

            
                  private com.isuwang.soa.task.domain.TTaskResponse success;
                  public com.isuwang.soa.task.domain.TTaskResponse getSuccess(){
                  return success;
                }

                  public void setSuccess(com.isuwang.soa.task.domain.TTaskResponse success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class FindTasks_argsSerializer implements TCommonBeanSerializer<findTasks_args>{
            
      @Override
      public findTasks_args read(TProtocol iprot) throws TException{

        findTasks_args bean = new findTasks_args();
        com.isuwang.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();

        while(true){
          schemeField = iprot.readFieldBegin();
          if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

          switch(schemeField.id){
          
              case 1:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                com.isuwang.soa.task.domain.TTaskRequest elem0 = new com.isuwang.soa.task.domain.TTaskRequest();
        elem0=new com.isuwang.soa.task.domain.serializer.TTaskRequestSerializer().read(iprot);
          bean.setRequest(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
            
                default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        validate(bean);
        return bean;
      }
    
      @Override
      public void write(findTasks_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("findTasks_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.soa.task.domain.TTaskRequest elem0 = bean.getRequest();
             new com.isuwang.soa.task.domain.serializer.TTaskRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(findTasks_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.soa.task.domain.serializer.TTaskRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(findTasks_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class FindTasks_resultSerializer implements TCommonBeanSerializer<findTasks_result>{
            @Override
            public findTasks_result read(TProtocol iprot) throws TException{

              findTasks_result bean = new findTasks_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                    com.isuwang.soa.task.domain.TTaskResponse elem0 = new com.isuwang.soa.task.domain.TTaskResponse();
        elem0=new com.isuwang.soa.task.domain.serializer.TTaskResponseSerializer().read(iprot);
          bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(findTasks_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("findTasks_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.isuwang.soa.task.domain.TTaskResponse elem0 = bean.getSuccess();
             new com.isuwang.soa.task.domain.serializer.TTaskResponseSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(findTasks_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.isuwang.soa.task.domain.serializer.TTaskResponseSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(findTasks_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class findTasks<I extends com.isuwang.soa.task.service.TaskAdminService> extends SoaProcessFunction<I, findTasks_args, findTasks_result, FindTasks_argsSerializer,  FindTasks_resultSerializer>{
            public findTasks(){
              super("findTasks", new FindTasks_argsSerializer(),  new FindTasks_resultSerializer());
            }
            
              @Override
              public findTasks_result getResult(I iface, findTasks_args args) throws TException{
                findTasks_result result = new findTasks_result();
                
                      result.success = iface.findTasks(args.request);
                    
                return result;
              }
            

            @Override
            public findTasks_args getEmptyArgsInstance(){
              return new findTasks_args();
            }

            @Override
            protected boolean isOneway(){
              return false;
            }
          }
          
            public static class findTaskDetailById_args {
            
                private Integer id;
                public Integer getId(){
                return this.id;
              }
                public void setId(Integer id){
                this.id = id;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("id").append("\":").append(id).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }


            public static class findTaskDetailById_result {

            
                  private com.isuwang.soa.task.domain.TTaskDetail success;
                  public com.isuwang.soa.task.domain.TTaskDetail getSuccess(){
                  return success;
                }

                  public void setSuccess(com.isuwang.soa.task.domain.TTaskDetail success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class FindTaskDetailById_argsSerializer implements TCommonBeanSerializer<findTaskDetailById_args>{
            
      @Override
      public findTaskDetailById_args read(TProtocol iprot) throws TException{

        findTaskDetailById_args bean = new findTaskDetailById_args();
        com.isuwang.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();

        while(true){
          schemeField = iprot.readFieldBegin();
          if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

          switch(schemeField.id){
          
              case 1:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                 int elem0 = iprot.readI32();
          bean.setId(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
            
                default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        validate(bean);
        return bean;
      }
    
      @Override
      public void write(findTaskDetailById_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("findTaskDetailById_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("id", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 1));
            Integer elem0 = bean.getId();
            oprot.writeI32(elem0);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(findTaskDetailById_args bean) throws TException{
      
    }
    

            @Override
            public String toString(findTaskDetailById_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class FindTaskDetailById_resultSerializer implements TCommonBeanSerializer<findTaskDetailById_result>{
            @Override
            public findTaskDetailById_result read(TProtocol iprot) throws TException{

              findTaskDetailById_result bean = new findTaskDetailById_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                    com.isuwang.soa.task.domain.TTaskDetail elem0 = new com.isuwang.soa.task.domain.TTaskDetail();
        elem0=new com.isuwang.soa.task.domain.serializer.TTaskDetailSerializer().read(iprot);
          bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(findTaskDetailById_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("findTaskDetailById_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.isuwang.soa.task.domain.TTaskDetail elem0 = bean.getSuccess();
             new com.isuwang.soa.task.domain.serializer.TTaskDetailSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(findTaskDetailById_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.isuwang.soa.task.domain.serializer.TTaskDetailSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(findTaskDetailById_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class findTaskDetailById<I extends com.isuwang.soa.task.service.TaskAdminService> extends SoaProcessFunction<I, findTaskDetailById_args, findTaskDetailById_result, FindTaskDetailById_argsSerializer,  FindTaskDetailById_resultSerializer>{
            public findTaskDetailById(){
              super("findTaskDetailById", new FindTaskDetailById_argsSerializer(),  new FindTaskDetailById_resultSerializer());
            }
            
              @Override
              public findTaskDetailById_result getResult(I iface, findTaskDetailById_args args) throws TException{
                findTaskDetailById_result result = new findTaskDetailById_result();
                
                      result.success = iface.findTaskDetailById(args.id);
                    
                return result;
              }
            

            @Override
            public findTaskDetailById_args getEmptyArgsInstance(){
              return new findTaskDetailById_args();
            }

            @Override
            protected boolean isOneway(){
              return false;
            }
          }
          
            public static class createTask_args {
            
                private com.isuwang.soa.task.domain.TCreateTaskRequest request;
                public com.isuwang.soa.task.domain.TCreateTaskRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.soa.task.domain.TCreateTaskRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }


            public static class createTask_result {

            
                  @Override
                  public String toString(){
                  return "{}";
                }
                
          }

            public static class CreateTask_argsSerializer implements TCommonBeanSerializer<createTask_args>{
            
      @Override
      public createTask_args read(TProtocol iprot) throws TException{

        createTask_args bean = new createTask_args();
        com.isuwang.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();

        while(true){
          schemeField = iprot.readFieldBegin();
          if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

          switch(schemeField.id){
          
              case 1:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                com.isuwang.soa.task.domain.TCreateTaskRequest elem0 = new com.isuwang.soa.task.domain.TCreateTaskRequest();
        elem0=new com.isuwang.soa.task.domain.serializer.TCreateTaskRequestSerializer().read(iprot);
          bean.setRequest(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
            
                default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        validate(bean);
        return bean;
      }
    
      @Override
      public void write(createTask_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("createTask_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.soa.task.domain.TCreateTaskRequest elem0 = bean.getRequest();
             new com.isuwang.soa.task.domain.serializer.TCreateTaskRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(createTask_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.soa.task.domain.serializer.TCreateTaskRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(createTask_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class CreateTask_resultSerializer implements TCommonBeanSerializer<createTask_result>{
            @Override
            public createTask_result read(TProtocol iprot) throws TException{

              createTask_result bean = new createTask_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.VOID){
                    
         com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(createTask_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("createTask_result"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(createTask_result bean) throws TException{
      
    }
    

            @Override
            public String toString(createTask_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class createTask<I extends com.isuwang.soa.task.service.TaskAdminService> extends SoaProcessFunction<I, createTask_args, createTask_result, CreateTask_argsSerializer,  CreateTask_resultSerializer>{
            public createTask(){
              super("createTask", new CreateTask_argsSerializer(),  new CreateTask_resultSerializer());
            }
            
              @Override
              public createTask_result getResult(I iface, createTask_args args) throws TException{
                createTask_result result = new createTask_result();
                
                      iface.createTask(args.request);
                    
                return result;
              }
            

            @Override
            public createTask_args getEmptyArgsInstance(){
              return new createTask_args();
            }

            @Override
            protected boolean isOneway(){
              return false;
            }
          }
          
            public static class updateTask_args {
            
                private com.isuwang.soa.task.domain.TUpdateTaskRequest request;
                public com.isuwang.soa.task.domain.TUpdateTaskRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.soa.task.domain.TUpdateTaskRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }


            public static class updateTask_result {

            
                  @Override
                  public String toString(){
                  return "{}";
                }
                
          }

            public static class UpdateTask_argsSerializer implements TCommonBeanSerializer<updateTask_args>{
            
      @Override
      public updateTask_args read(TProtocol iprot) throws TException{

        updateTask_args bean = new updateTask_args();
        com.isuwang.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();

        while(true){
          schemeField = iprot.readFieldBegin();
          if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

          switch(schemeField.id){
          
              case 1:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                com.isuwang.soa.task.domain.TUpdateTaskRequest elem0 = new com.isuwang.soa.task.domain.TUpdateTaskRequest();
        elem0=new com.isuwang.soa.task.domain.serializer.TUpdateTaskRequestSerializer().read(iprot);
          bean.setRequest(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
            
                default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        validate(bean);
        return bean;
      }
    
      @Override
      public void write(updateTask_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("updateTask_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.soa.task.domain.TUpdateTaskRequest elem0 = bean.getRequest();
             new com.isuwang.soa.task.domain.serializer.TUpdateTaskRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(updateTask_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.soa.task.domain.serializer.TUpdateTaskRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(updateTask_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class UpdateTask_resultSerializer implements TCommonBeanSerializer<updateTask_result>{
            @Override
            public updateTask_result read(TProtocol iprot) throws TException{

              updateTask_result bean = new updateTask_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.VOID){
                    
         com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(updateTask_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("updateTask_result"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(updateTask_result bean) throws TException{
      
    }
    

            @Override
            public String toString(updateTask_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class updateTask<I extends com.isuwang.soa.task.service.TaskAdminService> extends SoaProcessFunction<I, updateTask_args, updateTask_result, UpdateTask_argsSerializer,  UpdateTask_resultSerializer>{
            public updateTask(){
              super("updateTask", new UpdateTask_argsSerializer(),  new UpdateTask_resultSerializer());
            }
            
              @Override
              public updateTask_result getResult(I iface, updateTask_args args) throws TException{
                updateTask_result result = new updateTask_result();
                
                      iface.updateTask(args.request);
                    
                return result;
              }
            

            @Override
            public updateTask_args getEmptyArgsInstance(){
              return new updateTask_args();
            }

            @Override
            protected boolean isOneway(){
              return false;
            }
          }
          
            public static class unbindSubTask_args {
            
                private Integer subTaskId;
                public Integer getSubTaskId(){
                return this.subTaskId;
              }
                public void setSubTaskId(Integer subTaskId){
                this.subTaskId = subTaskId;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("subTaskId").append("\":").append(subTaskId).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }


            public static class unbindSubTask_result {

            
                  @Override
                  public String toString(){
                  return "{}";
                }
                
          }

            public static class UnbindSubTask_argsSerializer implements TCommonBeanSerializer<unbindSubTask_args>{
            
      @Override
      public unbindSubTask_args read(TProtocol iprot) throws TException{

        unbindSubTask_args bean = new unbindSubTask_args();
        com.isuwang.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();

        while(true){
          schemeField = iprot.readFieldBegin();
          if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

          switch(schemeField.id){
          
              case 1:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                 int elem0 = iprot.readI32();
          bean.setSubTaskId(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
            
                default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        validate(bean);
        return bean;
      }
    
      @Override
      public void write(unbindSubTask_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("unbindSubTask_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("subTaskId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 1));
            Integer elem0 = bean.getSubTaskId();
            oprot.writeI32(elem0);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(unbindSubTask_args bean) throws TException{
      
    }
    

            @Override
            public String toString(unbindSubTask_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class UnbindSubTask_resultSerializer implements TCommonBeanSerializer<unbindSubTask_result>{
            @Override
            public unbindSubTask_result read(TProtocol iprot) throws TException{

              unbindSubTask_result bean = new unbindSubTask_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.VOID){
                    
         com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(unbindSubTask_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("unbindSubTask_result"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(unbindSubTask_result bean) throws TException{
      
    }
    

            @Override
            public String toString(unbindSubTask_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class unbindSubTask<I extends com.isuwang.soa.task.service.TaskAdminService> extends SoaProcessFunction<I, unbindSubTask_args, unbindSubTask_result, UnbindSubTask_argsSerializer,  UnbindSubTask_resultSerializer>{
            public unbindSubTask(){
              super("unbindSubTask", new UnbindSubTask_argsSerializer(),  new UnbindSubTask_resultSerializer());
            }
            
              @Override
              public unbindSubTask_result getResult(I iface, unbindSubTask_args args) throws TException{
                unbindSubTask_result result = new unbindSubTask_result();
                
                      iface.unbindSubTask(args.subTaskId);
                    
                return result;
              }
            

            @Override
            public unbindSubTask_args getEmptyArgsInstance(){
              return new unbindSubTask_args();
            }

            @Override
            protected boolean isOneway(){
              return false;
            }
          }
          
            public static class createTaskRemark_args {
            
                private com.isuwang.soa.task.domain.TSaveTaskRemark request;
                public com.isuwang.soa.task.domain.TSaveTaskRemark getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.soa.task.domain.TSaveTaskRemark request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }


            public static class createTaskRemark_result {

            
                  @Override
                  public String toString(){
                  return "{}";
                }
                
          }

            public static class CreateTaskRemark_argsSerializer implements TCommonBeanSerializer<createTaskRemark_args>{
            
      @Override
      public createTaskRemark_args read(TProtocol iprot) throws TException{

        createTaskRemark_args bean = new createTaskRemark_args();
        com.isuwang.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();

        while(true){
          schemeField = iprot.readFieldBegin();
          if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

          switch(schemeField.id){
          
              case 1:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                com.isuwang.soa.task.domain.TSaveTaskRemark elem0 = new com.isuwang.soa.task.domain.TSaveTaskRemark();
        elem0=new com.isuwang.soa.task.domain.serializer.TSaveTaskRemarkSerializer().read(iprot);
          bean.setRequest(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
            
                default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        validate(bean);
        return bean;
      }
    
      @Override
      public void write(createTaskRemark_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("createTaskRemark_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.soa.task.domain.TSaveTaskRemark elem0 = bean.getRequest();
             new com.isuwang.soa.task.domain.serializer.TSaveTaskRemarkSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(createTaskRemark_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.soa.task.domain.serializer.TSaveTaskRemarkSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(createTaskRemark_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class CreateTaskRemark_resultSerializer implements TCommonBeanSerializer<createTaskRemark_result>{
            @Override
            public createTaskRemark_result read(TProtocol iprot) throws TException{

              createTaskRemark_result bean = new createTaskRemark_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.VOID){
                    
         com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(createTaskRemark_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("createTaskRemark_result"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(createTaskRemark_result bean) throws TException{
      
    }
    

            @Override
            public String toString(createTaskRemark_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class createTaskRemark<I extends com.isuwang.soa.task.service.TaskAdminService> extends SoaProcessFunction<I, createTaskRemark_args, createTaskRemark_result, CreateTaskRemark_argsSerializer,  CreateTaskRemark_resultSerializer>{
            public createTaskRemark(){
              super("createTaskRemark", new CreateTaskRemark_argsSerializer(),  new CreateTaskRemark_resultSerializer());
            }
            
              @Override
              public createTaskRemark_result getResult(I iface, createTaskRemark_args args) throws TException{
                createTaskRemark_result result = new createTaskRemark_result();
                
                      iface.createTaskRemark(args.request);
                    
                return result;
              }
            

            @Override
            public createTaskRemark_args getEmptyArgsInstance(){
              return new createTaskRemark_args();
            }

            @Override
            protected boolean isOneway(){
              return false;
            }
          }
          
            public static class updateTaskRemark_args {
            
                private com.isuwang.soa.task.domain.TSaveTaskRemark request;
                public com.isuwang.soa.task.domain.TSaveTaskRemark getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.soa.task.domain.TSaveTaskRemark request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }


            public static class updateTaskRemark_result {

            
                  @Override
                  public String toString(){
                  return "{}";
                }
                
          }

            public static class UpdateTaskRemark_argsSerializer implements TCommonBeanSerializer<updateTaskRemark_args>{
            
      @Override
      public updateTaskRemark_args read(TProtocol iprot) throws TException{

        updateTaskRemark_args bean = new updateTaskRemark_args();
        com.isuwang.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();

        while(true){
          schemeField = iprot.readFieldBegin();
          if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

          switch(schemeField.id){
          
              case 1:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                com.isuwang.soa.task.domain.TSaveTaskRemark elem0 = new com.isuwang.soa.task.domain.TSaveTaskRemark();
        elem0=new com.isuwang.soa.task.domain.serializer.TSaveTaskRemarkSerializer().read(iprot);
          bean.setRequest(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
            
                default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        validate(bean);
        return bean;
      }
    
      @Override
      public void write(updateTaskRemark_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("updateTaskRemark_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.soa.task.domain.TSaveTaskRemark elem0 = bean.getRequest();
             new com.isuwang.soa.task.domain.serializer.TSaveTaskRemarkSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(updateTaskRemark_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.soa.task.domain.serializer.TSaveTaskRemarkSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(updateTaskRemark_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class UpdateTaskRemark_resultSerializer implements TCommonBeanSerializer<updateTaskRemark_result>{
            @Override
            public updateTaskRemark_result read(TProtocol iprot) throws TException{

              updateTaskRemark_result bean = new updateTaskRemark_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.VOID){
                    
         com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(updateTaskRemark_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("updateTaskRemark_result"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(updateTaskRemark_result bean) throws TException{
      
    }
    

            @Override
            public String toString(updateTaskRemark_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class updateTaskRemark<I extends com.isuwang.soa.task.service.TaskAdminService> extends SoaProcessFunction<I, updateTaskRemark_args, updateTaskRemark_result, UpdateTaskRemark_argsSerializer,  UpdateTaskRemark_resultSerializer>{
            public updateTaskRemark(){
              super("updateTaskRemark", new UpdateTaskRemark_argsSerializer(),  new UpdateTaskRemark_resultSerializer());
            }
            
              @Override
              public updateTaskRemark_result getResult(I iface, updateTaskRemark_args args) throws TException{
                updateTaskRemark_result result = new updateTaskRemark_result();
                
                      iface.updateTaskRemark(args.request);
                    
                return result;
              }
            

            @Override
            public updateTaskRemark_args getEmptyArgsInstance(){
              return new updateTaskRemark_args();
            }

            @Override
            protected boolean isOneway(){
              return false;
            }
          }
          
            public static class deleteTaskRemark_args {
            
                private Integer id;
                public Integer getId(){
                return this.id;
              }
                public void setId(Integer id){
                this.id = id;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("id").append("\":").append(id).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }


            public static class deleteTaskRemark_result {

            
                  @Override
                  public String toString(){
                  return "{}";
                }
                
          }

            public static class DeleteTaskRemark_argsSerializer implements TCommonBeanSerializer<deleteTaskRemark_args>{
            
      @Override
      public deleteTaskRemark_args read(TProtocol iprot) throws TException{

        deleteTaskRemark_args bean = new deleteTaskRemark_args();
        com.isuwang.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();

        while(true){
          schemeField = iprot.readFieldBegin();
          if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

          switch(schemeField.id){
          
              case 1:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                 int elem0 = iprot.readI32();
          bean.setId(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
            
                default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        validate(bean);
        return bean;
      }
    
      @Override
      public void write(deleteTaskRemark_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("deleteTaskRemark_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("id", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 1));
            Integer elem0 = bean.getId();
            oprot.writeI32(elem0);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(deleteTaskRemark_args bean) throws TException{
      
    }
    

            @Override
            public String toString(deleteTaskRemark_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class DeleteTaskRemark_resultSerializer implements TCommonBeanSerializer<deleteTaskRemark_result>{
            @Override
            public deleteTaskRemark_result read(TProtocol iprot) throws TException{

              deleteTaskRemark_result bean = new deleteTaskRemark_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.VOID){
                    
         com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(deleteTaskRemark_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("deleteTaskRemark_result"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(deleteTaskRemark_result bean) throws TException{
      
    }
    

            @Override
            public String toString(deleteTaskRemark_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class deleteTaskRemark<I extends com.isuwang.soa.task.service.TaskAdminService> extends SoaProcessFunction<I, deleteTaskRemark_args, deleteTaskRemark_result, DeleteTaskRemark_argsSerializer,  DeleteTaskRemark_resultSerializer>{
            public deleteTaskRemark(){
              super("deleteTaskRemark", new DeleteTaskRemark_argsSerializer(),  new DeleteTaskRemark_resultSerializer());
            }
            
              @Override
              public deleteTaskRemark_result getResult(I iface, deleteTaskRemark_args args) throws TException{
                deleteTaskRemark_result result = new deleteTaskRemark_result();
                
                      iface.deleteTaskRemark(args.id);
                    
                return result;
              }
            

            @Override
            public deleteTaskRemark_args getEmptyArgsInstance(){
              return new deleteTaskRemark_args();
            }

            @Override
            protected boolean isOneway(){
              return false;
            }
          }
          
            public static class createTaskLog_args {
            
                private com.isuwang.soa.task.domain.TCreateTaskLog request;
                public com.isuwang.soa.task.domain.TCreateTaskLog getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.soa.task.domain.TCreateTaskLog request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }


            public static class createTaskLog_result {

            
                  @Override
                  public String toString(){
                  return "{}";
                }
                
          }

            public static class CreateTaskLog_argsSerializer implements TCommonBeanSerializer<createTaskLog_args>{
            
      @Override
      public createTaskLog_args read(TProtocol iprot) throws TException{

        createTaskLog_args bean = new createTaskLog_args();
        com.isuwang.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();

        while(true){
          schemeField = iprot.readFieldBegin();
          if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

          switch(schemeField.id){
          
              case 1:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                com.isuwang.soa.task.domain.TCreateTaskLog elem0 = new com.isuwang.soa.task.domain.TCreateTaskLog();
        elem0=new com.isuwang.soa.task.domain.serializer.TCreateTaskLogSerializer().read(iprot);
          bean.setRequest(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
            
                default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        validate(bean);
        return bean;
      }
    
      @Override
      public void write(createTaskLog_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("createTaskLog_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.soa.task.domain.TCreateTaskLog elem0 = bean.getRequest();
             new com.isuwang.soa.task.domain.serializer.TCreateTaskLogSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(createTaskLog_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.soa.task.domain.serializer.TCreateTaskLogSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(createTaskLog_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class CreateTaskLog_resultSerializer implements TCommonBeanSerializer<createTaskLog_result>{
            @Override
            public createTaskLog_result read(TProtocol iprot) throws TException{

              createTaskLog_result bean = new createTaskLog_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.VOID){
                    
         com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(createTaskLog_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("createTaskLog_result"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(createTaskLog_result bean) throws TException{
      
    }
    

            @Override
            public String toString(createTaskLog_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class createTaskLog<I extends com.isuwang.soa.task.service.TaskAdminService> extends SoaProcessFunction<I, createTaskLog_args, createTaskLog_result, CreateTaskLog_argsSerializer,  CreateTaskLog_resultSerializer>{
            public createTaskLog(){
              super("createTaskLog", new CreateTaskLog_argsSerializer(),  new CreateTaskLog_resultSerializer());
            }
            
              @Override
              public createTaskLog_result getResult(I iface, createTaskLog_args args) throws TException{
                createTaskLog_result result = new createTaskLog_result();
                
                      iface.createTaskLog(args.request);
                    
                return result;
              }
            

            @Override
            public createTaskLog_args getEmptyArgsInstance(){
              return new createTaskLog_args();
            }

            @Override
            protected boolean isOneway(){
              return false;
            }
          }
          
            public static class createTaskAttachment_args {
            
                private com.isuwang.soa.task.domain.TCreateTaskAttachment request;
                public com.isuwang.soa.task.domain.TCreateTaskAttachment getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.soa.task.domain.TCreateTaskAttachment request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }


            public static class createTaskAttachment_result {

            
                  private Integer success;
                  public Integer getSuccess(){
                  return success;
                }

                  public void setSuccess(Integer success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(success).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class CreateTaskAttachment_argsSerializer implements TCommonBeanSerializer<createTaskAttachment_args>{
            
      @Override
      public createTaskAttachment_args read(TProtocol iprot) throws TException{

        createTaskAttachment_args bean = new createTaskAttachment_args();
        com.isuwang.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();

        while(true){
          schemeField = iprot.readFieldBegin();
          if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

          switch(schemeField.id){
          
              case 1:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                com.isuwang.soa.task.domain.TCreateTaskAttachment elem0 = new com.isuwang.soa.task.domain.TCreateTaskAttachment();
        elem0=new com.isuwang.soa.task.domain.serializer.TCreateTaskAttachmentSerializer().read(iprot);
          bean.setRequest(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
            
                default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        validate(bean);
        return bean;
      }
    
      @Override
      public void write(createTaskAttachment_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("createTaskAttachment_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.soa.task.domain.TCreateTaskAttachment elem0 = bean.getRequest();
             new com.isuwang.soa.task.domain.serializer.TCreateTaskAttachmentSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(createTaskAttachment_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.soa.task.domain.serializer.TCreateTaskAttachmentSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(createTaskAttachment_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class CreateTaskAttachment_resultSerializer implements TCommonBeanSerializer<createTaskAttachment_result>{
            @Override
            public createTaskAttachment_result read(TProtocol iprot) throws TException{

              createTaskAttachment_result bean = new createTaskAttachment_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                     int elem0 = iprot.readI32();
          bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(createTaskAttachment_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("createTaskAttachment_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 0));
            Integer elem0 = bean.getSuccess();
            oprot.writeI32(elem0);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(createTaskAttachment_result bean) throws TException{
      
    }
    

            @Override
            public String toString(createTaskAttachment_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class createTaskAttachment<I extends com.isuwang.soa.task.service.TaskAdminService> extends SoaProcessFunction<I, createTaskAttachment_args, createTaskAttachment_result, CreateTaskAttachment_argsSerializer,  CreateTaskAttachment_resultSerializer>{
            public createTaskAttachment(){
              super("createTaskAttachment", new CreateTaskAttachment_argsSerializer(),  new CreateTaskAttachment_resultSerializer());
            }
            
              @Override
              public createTaskAttachment_result getResult(I iface, createTaskAttachment_args args) throws TException{
                createTaskAttachment_result result = new createTaskAttachment_result();
                
                      result.success = iface.createTaskAttachment(args.request);
                    
                return result;
              }
            

            @Override
            public createTaskAttachment_args getEmptyArgsInstance(){
              return new createTaskAttachment_args();
            }

            @Override
            protected boolean isOneway(){
              return false;
            }
          }
          
            public static class deleteTaskAttachment_args {
            
                private Integer id;
                public Integer getId(){
                return this.id;
              }
                public void setId(Integer id){
                this.id = id;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("id").append("\":").append(id).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }


            public static class deleteTaskAttachment_result {

            
                  @Override
                  public String toString(){
                  return "{}";
                }
                
          }

            public static class DeleteTaskAttachment_argsSerializer implements TCommonBeanSerializer<deleteTaskAttachment_args>{
            
      @Override
      public deleteTaskAttachment_args read(TProtocol iprot) throws TException{

        deleteTaskAttachment_args bean = new deleteTaskAttachment_args();
        com.isuwang.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();

        while(true){
          schemeField = iprot.readFieldBegin();
          if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

          switch(schemeField.id){
          
              case 1:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                 int elem0 = iprot.readI32();
          bean.setId(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
            
                default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        validate(bean);
        return bean;
      }
    
      @Override
      public void write(deleteTaskAttachment_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("deleteTaskAttachment_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("id", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 1));
            Integer elem0 = bean.getId();
            oprot.writeI32(elem0);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(deleteTaskAttachment_args bean) throws TException{
      
    }
    

            @Override
            public String toString(deleteTaskAttachment_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class DeleteTaskAttachment_resultSerializer implements TCommonBeanSerializer<deleteTaskAttachment_result>{
            @Override
            public deleteTaskAttachment_result read(TProtocol iprot) throws TException{

              deleteTaskAttachment_result bean = new deleteTaskAttachment_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.VOID){
                    
         com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(deleteTaskAttachment_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("deleteTaskAttachment_result"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(deleteTaskAttachment_result bean) throws TException{
      
    }
    

            @Override
            public String toString(deleteTaskAttachment_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class deleteTaskAttachment<I extends com.isuwang.soa.task.service.TaskAdminService> extends SoaProcessFunction<I, deleteTaskAttachment_args, deleteTaskAttachment_result, DeleteTaskAttachment_argsSerializer,  DeleteTaskAttachment_resultSerializer>{
            public deleteTaskAttachment(){
              super("deleteTaskAttachment", new DeleteTaskAttachment_argsSerializer(),  new DeleteTaskAttachment_resultSerializer());
            }
            
              @Override
              public deleteTaskAttachment_result getResult(I iface, deleteTaskAttachment_args args) throws TException{
                deleteTaskAttachment_result result = new deleteTaskAttachment_result();
                
                      iface.deleteTaskAttachment(args.id);
                    
                return result;
              }
            

            @Override
            public deleteTaskAttachment_args getEmptyArgsInstance(){
              return new deleteTaskAttachment_args();
            }

            @Override
            protected boolean isOneway(){
              return false;
            }
          }
          
            public static class findAllTaskNos4Picker_args {
            

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }


            public static class findAllTaskNos4Picker_result {

            
                  private java.util.List<com.isuwang.soa.task.domain.TTaskPickerContainer> success;
                  public java.util.List<com.isuwang.soa.task.domain.TTaskPickerContainer> getSuccess(){
                  return success;
                }

                  public void setSuccess(java.util.List<com.isuwang.soa.task.domain.TTaskPickerContainer> success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(success).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class FindAllTaskNos4Picker_argsSerializer implements TCommonBeanSerializer<findAllTaskNos4Picker_args>{
            
      @Override
      public findAllTaskNos4Picker_args read(TProtocol iprot) throws TException{

        findAllTaskNos4Picker_args bean = new findAllTaskNos4Picker_args();
        com.isuwang.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();

        while(true){
          schemeField = iprot.readFieldBegin();
          if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

          switch(schemeField.id){
          
            
                default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        validate(bean);
        return bean;
      }
    
      @Override
      public void write(findAllTaskNos4Picker_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("findAllTaskNos4Picker_args"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(findAllTaskNos4Picker_args bean) throws TException{
      
    }
    

            @Override
            public String toString(findAllTaskNos4Picker_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class FindAllTaskNos4Picker_resultSerializer implements TCommonBeanSerializer<findAllTaskNos4Picker_result>{
            @Override
            public findAllTaskNos4Picker_result read(TProtocol iprot) throws TException{

              findAllTaskNos4Picker_result bean = new findAllTaskNos4Picker_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.LIST){
                     com.isuwang.org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
        java.util.List<com.isuwang.soa.task.domain.TTaskPickerContainer> elem0 = new java.util.ArrayList<>(_list0.size);
        for(int _i0 = 0; _i0 < _list0.size; ++ _i0){
          com.isuwang.soa.task.domain.TTaskPickerContainer elem1 = new com.isuwang.soa.task.domain.TTaskPickerContainer();
        elem1=new com.isuwang.soa.task.domain.serializer.TTaskPickerContainerSerializer().read(iprot);
          elem0.add(elem1);
        }
        iprot.readListEnd();
          bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(findAllTaskNos4Picker_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("findAllTaskNos4Picker_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.LIST, (short) 0));
            java.util.List<com.isuwang.soa.task.domain.TTaskPickerContainer> elem0 = bean.getSuccess();
            
          oprot.writeListBegin(new com.isuwang.org.apache.thrift.protocol.TList(com.isuwang.org.apache.thrift.protocol.TType.STRUCT, elem0.size()));
          for(com.isuwang.soa.task.domain.TTaskPickerContainer elem1 : elem0){
           new com.isuwang.soa.task.domain.serializer.TTaskPickerContainerSerializer().write(elem1, oprot);
        }
          oprot.writeListEnd();
        
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(findAllTaskNos4Picker_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
    }
    

            @Override
            public String toString(findAllTaskNos4Picker_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class findAllTaskNos4Picker<I extends com.isuwang.soa.task.service.TaskAdminService> extends SoaProcessFunction<I, findAllTaskNos4Picker_args, findAllTaskNos4Picker_result, FindAllTaskNos4Picker_argsSerializer,  FindAllTaskNos4Picker_resultSerializer>{
            public findAllTaskNos4Picker(){
              super("findAllTaskNos4Picker", new FindAllTaskNos4Picker_argsSerializer(),  new FindAllTaskNos4Picker_resultSerializer());
            }
            
              @Override
              public findAllTaskNos4Picker_result getResult(I iface, findAllTaskNos4Picker_args args) throws TException{
                findAllTaskNos4Picker_result result = new findAllTaskNos4Picker_result();
                
                      result.success = iface.findAllTaskNos4Picker();
                    
                return result;
              }
            

            @Override
            public findAllTaskNos4Picker_args getEmptyArgsInstance(){
              return new findAllTaskNos4Picker_args();
            }

            @Override
            protected boolean isOneway(){
              return false;
            }
          }
          

        public static class getServiceMetadata_args {

          @Override
          public String toString() {
            return "{}";
          }
        }


        public static class getServiceMetadata_result {

          private String success;

          public String getSuccess() {
            return success;
          }

          public void setSuccess(String success) {
            this.success = success;
          }

          @Override
          public String toString() {
            StringBuilder stringBuilder = new StringBuilder("{");
              stringBuilder.append("\"").append("success").append("\":\"").append(this.success).append("\",");
              stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
              stringBuilder.append("}");

            return stringBuilder.toString();
          }
        }

        public static class GetServiceMetadata_argsSerializer implements TCommonBeanSerializer<getServiceMetadata_args> {

          @Override
          public getServiceMetadata_args read(TProtocol iprot) throws TException {

            getServiceMetadata_args bean =new getServiceMetadata_args();
            com.isuwang.org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();

            while (true) {
              schemeField = iprot.readFieldBegin();
              if (schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP) {
                break;
              }
              switch (schemeField.id) {
                default:
                com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);

              }
              iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            validate(bean);
            return bean;
          }


          @Override
          public void write(getServiceMetadata_args bean, TProtocol oprot) throws TException {

            validate(bean);
            oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getServiceMetadata_args"));
            oprot.writeFieldStop();
            oprot.writeStructEnd();
          }

          public void validate(getServiceMetadata_args bean) throws TException {}

          @Override
          public String toString(getServiceMetadata_args bean) {
            return bean == null ? "null" : bean.toString();
          }

        }

        public static class GetServiceMetadata_resultSerializer implements TCommonBeanSerializer<getServiceMetadata_result> {
          @Override
          public getServiceMetadata_result read(TProtocol iprot) throws TException {

            getServiceMetadata_result bean = new getServiceMetadata_result();
            com.isuwang.org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();

            while (true) {
              schemeField = iprot.readFieldBegin();
              if (schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP) {
                break;
              }

              switch (schemeField.id) {
                case 0:  //SUCCESS
                if (schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING) {
                  bean.setSuccess(iprot.readString());
                } else {
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
                default:
                com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            validate(bean);
            return bean;
          }

          @Override
          public void write(getServiceMetadata_result bean, TProtocol oprot) throws TException {

            validate(bean);
            oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getServiceMetadata_result"));

            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 0));
            oprot.writeString(bean.getSuccess());
            oprot.writeFieldEnd();

            oprot.writeFieldStop();
            oprot.writeStructEnd();
          }

          public void validate(getServiceMetadata_result bean) throws TException {

            if (bean.getSuccess() == null)
            throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
          }

          @Override
          public String toString(getServiceMetadata_result bean) {
            return bean == null ? "null" : bean.toString();
          }
        }

        public static class getServiceMetadata<I extends com.isuwang.soa.task.service.TaskAdminService> extends SoaProcessFunction<I, getServiceMetadata_args, getServiceMetadata_result, GetServiceMetadata_argsSerializer, GetServiceMetadata_resultSerializer> {
          public getServiceMetadata() {
            super("getServiceMetadata", new GetServiceMetadata_argsSerializer(), new GetServiceMetadata_resultSerializer());
          }

          @Override
          public getServiceMetadata_result getResult(I iface, getServiceMetadata_args args) throws TException {
            getServiceMetadata_result result = new getServiceMetadata_result();

            try (InputStreamReader isr = new InputStreamReader(TaskAdminServiceCodec.class.getClassLoader().getResourceAsStream("com.isuwang.soa.task.service.TaskAdminService.xml"));
            BufferedReader in = new BufferedReader(isr)) {
              int len = 0;
              StringBuilder str = new StringBuilder("");
              String line;
              while ((line = in.readLine()) != null) {

                if (len != 0) {
                  str.append("\r\n").append(line);
                } else {
                  str.append(line);
                }
                len++;
              }
              result.success = str.toString();

            } catch (Exception e) {
              e.printStackTrace();
              result.success = "";
            }

            return result;
          }

          @Override
          public getServiceMetadata_args getEmptyArgsInstance() {
            return new getServiceMetadata_args();
          }

          @Override
          protected boolean isOneway() {
            return false;
          }
        }

        @SuppressWarnings("unchecked")
        public static class Processor<I extends com.isuwang.soa.task.service.TaskAdminService> extends SoaCommonBaseProcessor{
          public Processor(I iface){
            super(iface, getProcessMap(new java.util.HashMap<>()));
          }

          @SuppressWarnings("unchecked")
          private static <I extends com.isuwang.soa.task.service.TaskAdminService> java.util.Map<String, SoaProcessFunction<I, ?, ?, ? extends TCommonBeanSerializer<?>, ? extends TCommonBeanSerializer<?>>> getProcessMap(java.util.Map<String, SoaProcessFunction<I, ?, ?, ? extends TCommonBeanSerializer<?>, ? extends TCommonBeanSerializer<?>>> processMap){
            
                processMap.put("findTasks", new findTasks());
              
                processMap.put("findTaskDetailById", new findTaskDetailById());
              
                processMap.put("createTask", new createTask());
              
                processMap.put("updateTask", new updateTask());
              
                processMap.put("unbindSubTask", new unbindSubTask());
              
                processMap.put("createTaskRemark", new createTaskRemark());
              
                processMap.put("updateTaskRemark", new updateTaskRemark());
              
                processMap.put("deleteTaskRemark", new deleteTaskRemark());
              
                processMap.put("createTaskLog", new createTaskLog());
              
                processMap.put("createTaskAttachment", new createTaskAttachment());
              
                processMap.put("deleteTaskAttachment", new deleteTaskAttachment());
              
                processMap.put("findAllTaskNos4Picker", new findAllTaskNos4Picker());
              
            processMap.put("getServiceMetadata", new getServiceMetadata());

            return processMap;
          }
        }

        }
      