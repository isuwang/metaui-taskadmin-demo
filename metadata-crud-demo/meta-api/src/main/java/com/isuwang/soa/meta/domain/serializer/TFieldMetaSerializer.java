 package com.isuwang.soa.meta.domain.serializer;
        import com.isuwang.soa.common.util.serializer.*;import com.isuwang.soa.meta.domain.serializer.*;

        import com.isuwang.dapeng.core.*;
        import com.isuwang.org.apache.thrift.*;
        import com.isuwang.org.apache.thrift.protocol.*;

        import java.util.Optional;
        import java.util.concurrent.CompletableFuture;
        import java.util.concurrent.Future;

        /**
        * Autogenerated by Dapeng-Code-Generator (1.2.2)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *  @generated
        **/
        public class TFieldMetaSerializer implements TCommonBeanSerializer<com.isuwang.soa.meta.domain.TFieldMeta>{
        
      @Override
      public com.isuwang.soa.meta.domain.TFieldMeta read(TProtocol iprot) throws TException{

        com.isuwang.soa.meta.domain.TFieldMeta bean = new com.isuwang.soa.meta.domain.TFieldMeta();
        com.isuwang.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();

        while(true){
          schemeField = iprot.readFieldBegin();
          if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

          switch(schemeField.id){
          
              case 1:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                 int elem0 = iprot.readI32();
          bean.setId(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 2:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
                String elem0 = iprot.readString();
          bean.setStructName(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 4:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
                String elem0 = iprot.readString();
          bean.setName(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 5:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
                String elem0 = iprot.readString();
          bean.setLabel(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 6:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.BOOL){
                boolean elem0 = iprot.readBool();
          bean.setIsRequired(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 7:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.BOOL){
                boolean elem0 = iprot.readBool();
          bean.setMulti(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 9:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.BOOL){
                boolean elem0 = iprot.readBool();
          bean.setEditable(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 10:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.BOOL){
                boolean elem0 = iprot.readBool();
          bean.setValidate(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 23:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.BOOL){
                boolean elem0 = iprot.readBool();
          bean.setVisible(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 24:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.BOOL){
                boolean elem0 = iprot.readBool();
          bean.setDisabled(elem0);
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 3:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
                String elem0 = iprot.readString();
          bean.setElement(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 8:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
                String elem0 = iprot.readString();
          bean.setFormat(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 11:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                 int elem0 = iprot.readI32();
          bean.setLength(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 12:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                 int elem0 = iprot.readI32();
          bean.setMaxLength(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 13:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                 int elem0 = iprot.readI32();
          bean.setMinLength(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 14:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
                String elem0 = iprot.readString();
          bean.setRegexp(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 15:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
                String elem0 = iprot.readString();
          bean.setPrompt(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 16:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                 int elem0 = iprot.readI32();
          bean.setMin(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 17:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                 int elem0 = iprot.readI32();
          bean.setMax(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 18:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
                String elem0 = iprot.readString();
          bean.setPlaceholder(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 19:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
                String elem0 = iprot.readString();
          bean.setCandidates(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 20:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
                String elem0 = iprot.readString();
          bean.setCandidateLabel(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 21:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
                String elem0 = iprot.readString();
          bean.setCandidateValue(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
              case 22:
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
                String elem0 = iprot.readString();
          bean.setSrcKey(Optional.of(elem0));
                }else{
                     com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
              
            
                default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        validate(bean);
        return bean;
      }
    
      @Override
      public void write(com.isuwang.soa.meta.domain.TFieldMeta bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("TFieldMeta"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("id", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 1));
            Integer elem0 = bean.getId();
            oprot.writeI32(elem0);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("structName", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 2));
            String elem1 = bean.getStructName();
            oprot.writeString(elem1);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("name", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 4));
            String elem2 = bean.getName();
            oprot.writeString(elem2);
            
            oprot.writeFieldEnd();
          if(bean.getLabel().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("label", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 5));
              String elem3 = bean.getLabel().get();
              oprot.writeString(elem3);
              
            }
            
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("isRequired", com.isuwang.org.apache.thrift.protocol.TType.BOOL, (short) 6));
            Boolean elem4 = bean.getIsRequired();
            oprot.writeBool(elem4);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("multi", com.isuwang.org.apache.thrift.protocol.TType.BOOL, (short) 7));
            Boolean elem5 = bean.getMulti();
            oprot.writeBool(elem5);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("editable", com.isuwang.org.apache.thrift.protocol.TType.BOOL, (short) 9));
            Boolean elem6 = bean.getEditable();
            oprot.writeBool(elem6);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("validate", com.isuwang.org.apache.thrift.protocol.TType.BOOL, (short) 10));
            Boolean elem7 = bean.getValidate();
            oprot.writeBool(elem7);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("visible", com.isuwang.org.apache.thrift.protocol.TType.BOOL, (short) 23));
            Boolean elem8 = bean.getVisible();
            oprot.writeBool(elem8);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("disabled", com.isuwang.org.apache.thrift.protocol.TType.BOOL, (short) 24));
            Boolean elem9 = bean.getDisabled();
            oprot.writeBool(elem9);
            
            oprot.writeFieldEnd();
          if(bean.getElement().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("element", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 3));
              String elem10 = bean.getElement().get();
              oprot.writeString(elem10);
              
            }
            if(bean.getFormat().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("format", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 8));
              String elem11 = bean.getFormat().get();
              oprot.writeString(elem11);
              
            }
            if(bean.getLength().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("length", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 11));
              Integer elem12 = bean.getLength().get();
              oprot.writeI32(elem12);
              
            }
            if(bean.getMaxLength().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("maxLength", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 12));
              Integer elem13 = bean.getMaxLength().get();
              oprot.writeI32(elem13);
              
            }
            if(bean.getMinLength().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("minLength", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 13));
              Integer elem14 = bean.getMinLength().get();
              oprot.writeI32(elem14);
              
            }
            if(bean.getRegexp().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("regexp", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 14));
              String elem15 = bean.getRegexp().get();
              oprot.writeString(elem15);
              
            }
            if(bean.getPrompt().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("prompt", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 15));
              String elem16 = bean.getPrompt().get();
              oprot.writeString(elem16);
              
            }
            if(bean.getMin().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("min", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 16));
              Integer elem17 = bean.getMin().get();
              oprot.writeI32(elem17);
              
            }
            if(bean.getMax().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("max", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 17));
              Integer elem18 = bean.getMax().get();
              oprot.writeI32(elem18);
              
            }
            if(bean.getPlaceholder().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("placeholder", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 18));
              String elem19 = bean.getPlaceholder().get();
              oprot.writeString(elem19);
              
            }
            if(bean.getCandidates().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("candidates", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 19));
              String elem20 = bean.getCandidates().get();
              oprot.writeString(elem20);
              
            }
            if(bean.getCandidateLabel().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("candidateLabel", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 20));
              String elem21 = bean.getCandidateLabel().get();
              oprot.writeString(elem21);
              
            }
            if(bean.getCandidateValue().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("candidateValue", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 21));
              String elem22 = bean.getCandidateValue().get();
              oprot.writeString(elem22);
              
            }
            if(bean.getSrcKey().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("srcKey", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 22));
              String elem23 = bean.getSrcKey().get();
              oprot.writeString(elem23);
              
            }
            
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(com.isuwang.soa.meta.domain.TFieldMeta bean) throws TException{
      
              if(bean.getStructName() == null)
              throw new SoaException(SoaBaseCode.NotNull, "structName字段不允许为空");
            
              if(bean.getName() == null)
              throw new SoaException(SoaBaseCode.NotNull, "name字段不允许为空");
            
    }
    
        @Override
        public String toString(com.isuwang.soa.meta.domain.TFieldMeta bean)
        {return bean == null ? "null" : bean.toString();}
      }
      

      